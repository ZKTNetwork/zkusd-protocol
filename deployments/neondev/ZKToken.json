{
  "address": "0xE25c8c538ac4Bdab3cb7e27d9b52f28e7657896B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuanceAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zktStakingAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockupFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bountyAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpRewardsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multisigAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_communityIssuanceAddress",
          "type": "address"
        }
      ],
      "name": "CommunityIssuanceAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lockupContractFactoryAddress",
          "type": "address"
        }
      ],
      "name": "LockupContractFactoryAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_zktStakingAddress",
          "type": "address"
        }
      ],
      "name": "ZKTStakingAddressSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE_YEAR_IN_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuanceAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeploymentStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpRewardsEntitlement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockupContractFactory",
      "outputs": [
        {
          "internalType": "contract ILockupContractFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multisigAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "permitTypeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendToZKTStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zktStakingAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f116725a19b46ccfeaaae444a78db05adb44f47b56e1aae8b841c3e8e1cec28",
  "receipt": {
    "to": null,
    "from": "0x256dB3D00b3338f118a58dC95a6076bc5022Ba01",
    "contractAddress": "0x1327f0AD6db76059DF213DD87D4a2D026934e9c3",
    "transactionIndex": 0,
    "gasUsed": "55832440",
    "logsBloom": "0x
    "blockHash": "0x3a1be4818d6229f78bac0b5e8562c1fc94a59829020d0b7c3a3be0a22aef24fb",
    "transactionHash": "0x3f116725a19b46ccfeaaae444a78db05adb44f47b56e1aae8b841c3e8e1cec28",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 228340152,
        "transactionHash": "0x3f116725a19b46ccfeaaae444a78db05adb44f47b56e1aae8b841c3e8e1cec28",
        "address": "0x1327f0AD6db76059DF213DD87D4a2D026934e9c3",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000256db3d00b3338f118a58dc95a6076bc5022ba01"
        ],
        "data": "0x00000000000000000000000000000000000000000001a784379d99db42000000",
        "logIndex": 0,
        "blockHash": "0x3a1be4818d6229f78bac0b5e8562c1fc94a59829020d0b7c3a3be0a22aef24fb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 228340152,
        "transactionHash": "0x3f116725a19b46ccfeaaae444a78db05adb44f47b56e1aae8b841c3e8e1cec28",
        "address": "0x1327f0AD6db76059DF213DD87D4a2D026934e9c3",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d5b0392f6eec07782a029145c4b635f75c01054"
        ],
        "data": "0x0000000000000000000000000000000000000000001a784379d99db420000000",
        "logIndex": 1,
        "blockHash": "0x3a1be4818d6229f78bac0b5e8562c1fc94a59829020d0b7c3a3be0a22aef24fb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 228340152,
        "transactionHash": "0x3f116725a19b46ccfeaaae444a78db05adb44f47b56e1aae8b841c3e8e1cec28",
        "address": "0x1327f0AD6db76059DF213DD87D4a2D026934e9c3",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000256db3d00b3338f118a58dc95a6076bc5022ba01"
        ],
        "data": "0x000000000000000000000000000000000000000000011a582513bbe781555555",
        "logIndex": 2,
        "blockHash": "0x3a1be4818d6229f78bac0b5e8562c1fc94a59829020d0b7c3a3be0a22aef24fb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 228340152,
        "transactionHash": "0x3f116725a19b46ccfeaaae444a78db05adb44f47b56e1aae8b841c3e8e1cec28",
        "address": "0x1327f0AD6db76059DF213DD87D4a2D026934e9c3",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000256db3d00b3338f118a58dc95a6076bc5022ba01"
        ],
        "data": "0x000000000000000000000000000000000000000000357db3063d195c00aaaaab",
        "logIndex": 3,
        "blockHash": "0x3a1be4818d6229f78bac0b5e8562c1fc94a59829020d0b7c3a3be0a22aef24fb"
      }
    ],
    "blockNumber": 228340152,
    "cumulativeGasUsed": "55832440",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8D5b0392F6EEC07782A029145C4b635F75c01054",
    "0xf6fBE482d5bDb000360F30ba681778d326a356f5",
    "0x65A7C956F9AB396ea85360862035E61F41aAdF13",
    "0x256dB3D00b3338f118a58dC95a6076bc5022Ba01",
    "0x0000000000000000000000000000000000000000",
    "0x256dB3D00b3338f118a58dC95a6076bc5022Ba01"
  ],
  "numDeployments": 1,
  "solcInputHash": "86ff82a7dcea9d0b86c350418d855a56",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zktStakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockupFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bountyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpRewardsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multisigAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_communityIssuanceAddress\",\"type\":\"address\"}],\"name\":\"CommunityIssuanceAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lockupContractFactoryAddress\",\"type\":\"address\"}],\"name\":\"LockupContractFactoryAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_zktStakingAddress\",\"type\":\"address\"}],\"name\":\"ZKTStakingAddressSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_YEAR_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuanceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeploymentStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpRewardsEntitlement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupContractFactory\",\"outputs\":[{\"internalType\":\"contract ILockupContractFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permitTypeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToZKTStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zktStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current ERC2612 nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases `owner`'s nonce by one. This prevents a signature from being used multiple times. `owner` can limit the time a Permit is valid for by setting `deadline` to a value in the near future. The deadline argument can be set to uint(-1) to create Permits that effectively never expire.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `amount` as the allowance of `spender` over `owner`'s tokens, given `owner`'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `owner` cannot be the zero address. - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/ZKToken.sol\":\"ZKToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/common/ZKToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../dependencies/CheckContract.sol\\\";\\nimport \\\"../dependencies/ERC2612Permit.sol\\\";\\nimport \\\"../interfaces/IZKToken.sol\\\";\\nimport \\\"../interfaces/ILockupContractFactory.sol\\\";\\n\\ncontract ZKToken is IZKToken, CheckContract, ERC2612Permit {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant ONE_YEAR_IN_SECONDS = 31536000; // 60 * 60 * 24 * 365\\n\\n    // uint256 for use with SafeMath\\n    uint256 internal _1_MILLION = 1e24; // 1e6 * 1e18 = 1e24\\n\\n    uint256 internal immutable deploymentStartTime;\\n\\n    address public immutable communityIssuanceAddress;\\n    address public immutable zktStakingAddress;\\n\\n    uint256 internal immutable lpRewardsEntitlement;\\n\\n    ILockupContractFactory public immutable lockupContractFactory;\\n\\n    address public multisigAddress;\\n\\n    constructor(\\n        address _communityIssuanceAddress,\\n        address _zktStakingAddress,\\n        address _lockupFactoryAddress,\\n        address _bountyAddress,\\n        address _lpRewardsAddress,\\n        address _multisigAddress\\n    ) ERC20(\\\"ZKToken\\\", \\\"ZKT\\\") ERC2612Permit(\\\"ZKT\\\") {\\n        checkContract(_communityIssuanceAddress);\\n        checkContract(_zktStakingAddress);\\n        checkContract(_lockupFactoryAddress);\\n\\n        multisigAddress = _multisigAddress;\\n        deploymentStartTime = block.timestamp;\\n\\n        communityIssuanceAddress = _communityIssuanceAddress;\\n        zktStakingAddress = _zktStakingAddress;\\n        lockupContractFactory = ILockupContractFactory(_lockupFactoryAddress);\\n\\n        // --- Initial ZKT allocations ---\\n\\n        uint256 bountyEntitlement = _1_MILLION.mul(2); // Allocate 2 million for bounties/hackathons\\n        _mint(_bountyAddress, bountyEntitlement);\\n\\n        uint256 depositorsAndFrontEndsEntitlement = _1_MILLION.mul(32); // Allocate 32 million to the algorithmic issuance schedule\\n        _mint(_communityIssuanceAddress, depositorsAndFrontEndsEntitlement);\\n\\n        uint256 _lpRewardsEntitlement = _1_MILLION.mul(4).div(3); // Allocate 1.33 million for LP rewards\\n        lpRewardsEntitlement = _lpRewardsEntitlement;\\n        if (_lpRewardsAddress == address(0)) {\\n            _mint(_multisigAddress, _lpRewardsEntitlement);\\n        } else {\\n            _mint(_lpRewardsAddress, _lpRewardsEntitlement);\\n        }\\n\\n        // Allocate the remainder to the ZKT Multisig: (100 - 2 - 32 - 1.33) million = 64.66 million\\n        uint256 multisigEntitlement = _1_MILLION\\n            .mul(100)\\n            .sub(bountyEntitlement)\\n            .sub(depositorsAndFrontEndsEntitlement)\\n            .sub(_lpRewardsEntitlement);\\n\\n        _mint(_multisigAddress, multisigEntitlement);\\n    }\\n\\n    function getDeploymentStartTime() external view override returns (uint256) {\\n        return deploymentStartTime;\\n    }\\n\\n    function getLpRewardsEntitlement()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return lpRewardsEntitlement;\\n    }\\n\\n    function sendToZKTStaking(\\n        address _sender,\\n        uint256 _amount\\n    ) external override {\\n        _requireCallerIsZKTStaking();\\n        if (_isFirstYear()) {\\n            _requireSenderIsNotMultisig(_sender);\\n        } // Prevent the multisig from staking ZK\\n        _transfer(_sender, zktStakingAddress, _amount);\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override(IERC20, ERC20) returns (bool) {\\n        if (_isFirstYear()) {\\n            _requireCallerIsNotMultisig();\\n        }\\n\\n        return super.approve(spender, amount);\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public override(IERC20, ERC20) returns (bool) {\\n        // Restrict the multisig's transfers in first year\\n        if (_callerIsMultisig() && _isFirstYear()) {\\n            _requireRecipientIsRegisteredLC(recipient);\\n        }\\n\\n        _requireValidRecipient(recipient);\\n\\n        // Otherwise, standard transfer functionality\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override(IERC20, ERC20) returns (bool) {\\n        if (_isFirstYear()) {\\n            _requireSenderIsNotMultisig(sender);\\n        }\\n\\n        _requireValidRecipient(recipient);\\n\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) public override(ERC20) returns (bool) {\\n        if (_isFirstYear()) {\\n            _requireCallerIsNotMultisig();\\n        }\\n\\n        return super.increaseAllowance(spender, addedValue);\\n    }\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) public override(ERC20) returns (bool) {\\n        if (_isFirstYear()) {\\n            _requireCallerIsNotMultisig();\\n        }\\n\\n        return super.decreaseAllowance(spender, subtractedValue);\\n    }\\n\\n    // --- Helper functions ---\\n\\n    function _callerIsMultisig() internal view returns (bool) {\\n        return (msg.sender == multisigAddress);\\n    }\\n\\n    function _isFirstYear() internal view returns (bool) {\\n        return (block.timestamp.sub(deploymentStartTime) < ONE_YEAR_IN_SECONDS);\\n    }\\n\\n    // --- 'require' functions ---\\n\\n    function _requireValidRecipient(address _recipient) internal view {\\n        require(\\n            _recipient != address(0) && _recipient != address(this),\\n            \\\"ZK: Cannot transfer tokens directly to the ZK token contract or the zero address\\\"\\n        );\\n        require(\\n            _recipient != communityIssuanceAddress &&\\n                _recipient != zktStakingAddress,\\n            \\\"ZK: Cannot transfer tokens directly to the community issuance or staking contract\\\"\\n        );\\n    }\\n\\n    function _requireRecipientIsRegisteredLC(address _recipient) internal view {\\n        require(\\n            lockupContractFactory.isRegisteredLockup(_recipient),\\n            \\\"ZKToken: recipient must be a LockupContract registered in the Factory\\\"\\n        );\\n    }\\n\\n    function _requireSenderIsNotMultisig(address _sender) internal view {\\n        require(\\n            _sender != multisigAddress,\\n            \\\"ZKToken: sender must not be the multisig\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsNotMultisig() internal view {\\n        require(\\n            !_callerIsMultisig(),\\n            \\\"ZKToken: caller must not be the multisig\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsZKTStaking() internal view {\\n        require(\\n            msg.sender == zktStakingAddress,\\n            \\\"ZKToken: caller must be the ZKTStaking contract\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc1b5df4d0bb95c3f5579a12547c60fd190b7e8f44d441e167633e243226a8c55\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n        require(\\n            Address.isContract(_account),\\n            \\\"Account code size cannot be zero\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xaf457c01990a35e69f187bbaa4daceb410b624d7c34029246b54333816a4bba7\",\"license\":\"MIT\"},\"contracts/dependencies/ERC2612Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../interfaces/IERC2612.sol\\\";\\n\\nabstract contract ERC2612Permit is IERC2612, ERC20 {\\n    string internal constant _VERSION = \\\"1\\\";\\n\\n    // --- Data for EIP2612 ---\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 internal constant _PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 internal constant _TYPE_HASH =\\n        0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 internal immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 internal immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 internal immutable _HASHED_NAME;\\n    bytes32 internal immutable _HASHED_VERSION;\\n    mapping(address => uint256) internal _nonces;\\n\\n    constructor(string memory name) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(_VERSION));\\n\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = _chainID();\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(\\n            _TYPE_HASH,\\n            hashedName,\\n            hashedVersion\\n        );\\n    }\\n\\n    function domainSeparator() public view override returns (bytes32) {\\n        if (_chainID() == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return\\n                _buildDomainSeparator(\\n                    _TYPE_HASH,\\n                    _HASHED_NAME,\\n                    _HASHED_VERSION\\n                );\\n        }\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint amount,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(deadline >= block.timestamp, \\\"ZKUSD: expired deadline\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator(),\\n                keccak256(\\n                    abi.encode(\\n                        _PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        amount,\\n                        _nonces[owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress == owner, \\\"ZKUSD: invalid signature\\\");\\n        _approve(owner, spender, amount);\\n    }\\n\\n    function nonces(address owner) external view override returns (uint256) {\\n        // FOR EIP 2612\\n        return _nonces[owner];\\n    }\\n\\n    // --- Internal operations ---\\n\\n    function _chainID() private view returns (uint256 chainID) {\\n        assembly {\\n            chainID := chainid()\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 _typeHash,\\n        bytes32 _name,\\n        bytes32 _version\\n    ) private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _typeHash,\\n                    _name,\\n                    _version,\\n                    _chainID(),\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function version() external pure override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function permitTypeHash() external pure override returns (bytes32) {\\n        return _PERMIT_TYPEHASH;\\n    }\\n}\\n\",\"keccak256\":\"0x3764f57daf98c564fce80b5368df90609fb446596c84f0575fae2875f81fad1d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n     * a value in the near future. The deadline argument can be set to uint(-1) to\\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function version() external pure returns (string memory);\\n\\n    function permitTypeHash() external pure returns (bytes32);\\n\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf6ae13568584e5fd37aae751e77ebf0287d712f62100d830b7a9cd1d9948adfa\",\"license\":\"MIT\"},\"contracts/interfaces/ILockupContractFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILockupContractFactory {\\n    // --- Events ---\\n\\n    event ZKTokenAddressSet(address _zkTokenAddress);\\n    event LockupContractDeployedThroughFactory(\\n        address _lockupContractAddress,\\n        address _beneficiary,\\n        uint256 _unlockTime,\\n        address _deployer\\n    );\\n\\n    // --- Functions ---\\n\\n    function setZKTokenAddress(address _zkTokenAddress) external;\\n\\n    function deployLockupContract(\\n        address _beneficiary,\\n        uint256 _unlockTime\\n    ) external;\\n\\n    function isRegisteredLockup(address _addr) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0efa2ae1da8e58c4dff085ee13e63e1100440069d0e29879d5b61b5b0c2b23d9\",\"license\":\"MIT\"},\"contracts/interfaces/IZKToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZKToken is IERC20 {\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n    event ZKTStakingAddressSet(address _zktStakingAddress);\\n    event LockupContractFactoryAddressSet(\\n        address _lockupContractFactoryAddress\\n    );\\n\\n    // --- Functions ---\\n\\n    function sendToZKTStaking(address _sender, uint256 _amount) external;\\n\\n    function getDeploymentStartTime() external view returns (uint256);\\n\\n    function getLpRewardsEntitlement() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2957d7a9ae4c53d2454e688c1111a7e29dc267b8e80194acf18656b0330b9c44\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a060405269d3c21bcecceda10000006006553480156200002057600080fd5b5060405162001cb438038062001cb48339810160408190526200004391620004d6565b604051806040016040528060038152602001621692d560ea1b815250604051806040016040528060078152602001662d25aa37b5b2b760c91b815250604051806040016040528060038152602001621692d560ea1b8152508160039081620000ac9190620005fb565b506004620000bb8282620005fb565b5050815160209283012060408051808201825260018152603160f81b9085015260c08281527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660e08190524660a081815284517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a0152808601969096526060860192909252608080860191909152308583015283518086039092018252939091019091528051930192909220909152506200017886620002ec565b6200018385620002ec565b6200018e84620002ec565b600780546001600160a01b0319166001600160a01b038381169190911790915542610100528681166101205285811661014052841661018052600654600090620001e6906002620003af602090811b6200091d17901c565b9050620001f48482620003c6565b600654600090620002109060206200091d620003af821b17811c565b90506200021e8882620003c6565b6000620002576003620002436004600654620003af60201b6200091d1790919060201c565b6200048960201b620009291790919060201c565b61016081905290506001600160a01b03851662000280576200027a8482620003c6565b6200028c565b6200028c8582620003c6565b6000620002ce82620002ba85620002ba88620002ba6064600654620003af60201b6200091d1790919060201c565b6200049760201b620009351790919060201c565b9050620002dc8582620003c6565b5050505050505050505062000746565b6001600160a01b038116620003485760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064015b60405180910390fd5b6200035e81620004a560201b620009411760201c565b620003ac5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016200033f565b50565b6000620003bd8284620006dd565b90505b92915050565b6001600160a01b0382166200041e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016200033f565b8060026000828254620004329190620006f7565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6000620003bd82846200070d565b6000620003bd828462000730565b6001600160a01b03163b151590565b505050565b80516001600160a01b0381168114620004d157600080fd5b919050565b60008060008060008060c08789031215620004f057600080fd5b620004fb87620004b9565b95506200050b60208801620004b9565b94506200051b60408801620004b9565b93506200052b60608801620004b9565b92506200053b60808801620004b9565b91506200054b60a08801620004b9565b90509295509295509295565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200058257607f821691505b602082108103620005a357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004b457600081815260208120601f850160051c81016020861015620005d25750805b601f850160051c820191505b81811015620005f357828155600101620005de565b505050505050565b81516001600160401b0381111562000617576200061762000557565b6200062f816200062884546200056d565b84620005a9565b602080601f8311600181146200066757600084156200064e5750858301515b600019600386901b1c1916600185901b178555620005f3565b600085815260208120601f198616915b82811015620006985788860151825594840194600190910190840162000677565b5085821015620006b75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620003c057620003c0620006c7565b80820180821115620003c057620003c0620006c7565b6000826200072b57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115620003c057620003c0620006c7565b60805160a05160c05160e05161010051610120516101405161016051610180516114d3620007e1600039600081816103100152610d570152600061033c01526000818161038b0152818161080201528181610b760152610f7f0152600081816103c70152610b3901526000818161024d015261095d015260006108cf015260006108aa0152600061082f0152600061085701526114d36000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c8063811c5b4d116100e3578063d505accf1161008c578063e7c8fed411610066578063e7c8fed414610422578063f00adbf61461042d578063f698da251461044057600080fd5b8063d505accf146103ad578063d874ea74146103c2578063dd62ed3e146103e957600080fd5b8063a457c2d7116100bd578063a457c2d714610360578063a9059cbb14610373578063b4bb222d1461038657600080fd5b8063811c5b4d1461030b57806395d89b4114610332578063974f55901461033a57600080fd5b8063395093511161014557806354fd4d501161011f57806354fd4d501461029c57806370a08231146102b95780637ecebe00146102e257600080fd5b806339509351146102385780633c84b7c21461024b5780635462870d1461027157600080fd5b806318160ddd1161017657806318160ddd1461020e57806323b872dd14610216578063313ce5671461022957600080fd5b806306fdde031461019d578063095ea7b3146101bb57806310ce43bd146101de575b600080fd5b6101a5610448565b6040516101b29190611244565b60405180910390f35b6101ce6101c93660046112ae565b6104da565b60405190151581526020016101b2565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c95b6040519081526020016101b2565b600254610200565b6101ce6102243660046112d8565b610504565b604051601281526020016101b2565b6101ce6102463660046112ae565b610538565b7f0000000000000000000000000000000000000000000000000000000000000000610200565b600754610284906001600160a01b031681565b6040516001600160a01b0390911681526020016101b2565b6040805180820190915260018152603160f81b60208201526101a5565b6102006102c7366004611314565b6001600160a01b031660009081526020819052604090205490565b6102006102f0366004611314565b6001600160a01b031660009081526005602052604090205490565b6102847f000000000000000000000000000000000000000000000000000000000000000081565b6101a5610559565b7f0000000000000000000000000000000000000000000000000000000000000000610200565b6101ce61036e3660046112ae565b610568565b6101ce6103813660046112ae565b610589565b6102847f000000000000000000000000000000000000000000000000000000000000000081565b6103c06103bb36600461132f565b6105ca565b005b6102847f000000000000000000000000000000000000000000000000000000000000000081565b6102006103f73660046113a2565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102006301e1338081565b6103c061043b3660046112ae565b6107de565b61020061082b565b606060038054610457906113d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610483906113d5565b80156104d05780601f106104a5576101008083540402835291602001916104d0565b820191906000526020600020905b8154815290600101906020018083116104b357829003601f168201915b5050505050905090565b60006104e4610950565b156104f1576104f1610987565b6104fb83836109f4565b90505b92915050565b600061050e610950565b1561051c5761051c84610a0c565b61052583610a7e565b610530848484610c43565b949350505050565b6000610542610950565b1561054f5761054f610987565b6104fb8383610c67565b606060048054610457906113d5565b6000610572610950565b1561057f5761057f610987565b6104fb8383610ca6565b6007546000906001600160a01b0316331480156105a957506105a9610950565b156105b7576105b783610d38565b6105c083610a7e565b6104fb8383610e42565b4284101561061f5760405162461bcd60e51b815260206004820152601760248201527f5a4b5553443a206578706972656420646561646c696e6500000000000000000060448201526064015b60405180910390fd5b600061062961082b565b6001600160a01b038916600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c9290919061067783611425565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016106f092919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561075b573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b0316146107c85760405162461bcd60e51b815260206004820152601860248201527f5a4b5553443a20696e76616c6964207369676e617475726500000000000000006044820152606401610616565b6107d3898989610e50565b505050505050505050565b6107e6610f74565b6107ee610950565b156107fc576107fc82610a0c565b610827827f000000000000000000000000000000000000000000000000000000000000000083611012565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000460361087957507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60006104fb828461143e565b60006104fb8284611455565b60006104fb8284611477565b6001600160a01b03163b151590565b60006301e13380610981427f0000000000000000000000000000000000000000000000000000000000000000610935565b10905090565b6007546001600160a01b031633036109f25760405162461bcd60e51b815260206004820152602860248201527f5a4b546f6b656e3a2063616c6c6572206d757374206e6f7420626520746865206044820152676d756c746973696760c01b6064820152608401610616565b565b600033610a02818585610e50565b5060019392505050565b6007546001600160a01b0390811690821603610a7b5760405162461bcd60e51b815260206004820152602860248201527f5a4b546f6b656e3a2073656e646572206d757374206e6f7420626520746865206044820152676d756c746973696760c01b6064820152608401610616565b50565b6001600160a01b03811615801590610a9f57506001600160a01b0381163014155b610b375760405162461bcd60e51b815260206004820152605060248201527f5a4b3a2043616e6e6f74207472616e7366657220746f6b656e7320646972656360448201527f746c7920746f20746865205a4b20746f6b656e20636f6e7472616374206f722060648201527f746865207a65726f206164647265737300000000000000000000000000000000608482015260a401610616565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614158015610bab57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614155b610a7b5760405162461bcd60e51b815260206004820152605160248201527f5a4b3a2043616e6e6f74207472616e7366657220746f6b656e7320646972656360448201527f746c7920746f2074686520636f6d6d756e6974792069737375616e6365206f7260648201527f207374616b696e6720636f6e7472616374000000000000000000000000000000608482015260a401610616565b600033610c518582856111b8565b610c5c858585611012565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190610a029082908690610ca190879061148a565b610e50565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919083811015610d2b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610616565b610c5c8286868403610e50565b60405163bb7603f160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063bb7603f190602401602060405180830381865afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc2919061149d565b610a7b5760405162461bcd60e51b815260206004820152604560248201527f5a4b546f6b656e3a20726563697069656e74206d7573742062652061204c6f6360448201527f6b7570436f6e7472616374207265676973746572656420696e2074686520466160648201526463746f727960d81b608482015260a401610616565b600033610a02818585611012565b6001600160a01b038316610eb25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610616565b6001600160a01b038216610f135760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610616565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109f25760405162461bcd60e51b815260206004820152602f60248201527f5a4b546f6b656e3a2063616c6c6572206d75737420626520746865205a4b545360448201527f74616b696e6720636f6e747261637400000000000000000000000000000000006064820152608401610616565b6001600160a01b0383166110765760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610616565b6001600160a01b0382166110d85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610616565b6001600160a01b038316600090815260208190526040902054818110156111505760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610616565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b50505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146111b257818110156112375760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610616565b6111b28484848403610e50565b600060208083528351808285015260005b8181101561127157858101830151858201604001528201611255565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146112a957600080fd5b919050565b600080604083850312156112c157600080fd5b6112ca83611292565b946020939093013593505050565b6000806000606084860312156112ed57600080fd5b6112f684611292565b925061130460208501611292565b9150604084013590509250925092565b60006020828403121561132657600080fd5b6104fb82611292565b600080600080600080600060e0888a03121561134a57600080fd5b61135388611292565b965061136160208901611292565b95506040880135945060608801359350608088013560ff8116811461138557600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156113b557600080fd5b6113be83611292565b91506113cc60208401611292565b90509250929050565b600181811c908216806113e957607f821691505b60208210810361140957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016114375761143761140f565b5060010190565b80820281158282048414176104fe576104fe61140f565b60008261147257634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156104fe576104fe61140f565b808201808211156104fe576104fe61140f565b6000602082840312156114af57600080fd5b815180151581146114bf57600080fd5b939250505056fea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c8063811c5b4d116100e3578063d505accf1161008c578063e7c8fed411610066578063e7c8fed414610422578063f00adbf61461042d578063f698da251461044057600080fd5b8063d505accf146103ad578063d874ea74146103c2578063dd62ed3e146103e957600080fd5b8063a457c2d7116100bd578063a457c2d714610360578063a9059cbb14610373578063b4bb222d1461038657600080fd5b8063811c5b4d1461030b57806395d89b4114610332578063974f55901461033a57600080fd5b8063395093511161014557806354fd4d501161011f57806354fd4d501461029c57806370a08231146102b95780637ecebe00146102e257600080fd5b806339509351146102385780633c84b7c21461024b5780635462870d1461027157600080fd5b806318160ddd1161017657806318160ddd1461020e57806323b872dd14610216578063313ce5671461022957600080fd5b806306fdde031461019d578063095ea7b3146101bb57806310ce43bd146101de575b600080fd5b6101a5610448565b6040516101b29190611244565b60405180910390f35b6101ce6101c93660046112ae565b6104da565b60405190151581526020016101b2565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c95b6040519081526020016101b2565b600254610200565b6101ce6102243660046112d8565b610504565b604051601281526020016101b2565b6101ce6102463660046112ae565b610538565b7f0000000000000000000000000000000000000000000000000000000000000000610200565b600754610284906001600160a01b031681565b6040516001600160a01b0390911681526020016101b2565b6040805180820190915260018152603160f81b60208201526101a5565b6102006102c7366004611314565b6001600160a01b031660009081526020819052604090205490565b6102006102f0366004611314565b6001600160a01b031660009081526005602052604090205490565b6102847f000000000000000000000000000000000000000000000000000000000000000081565b6101a5610559565b7f0000000000000000000000000000000000000000000000000000000000000000610200565b6101ce61036e3660046112ae565b610568565b6101ce6103813660046112ae565b610589565b6102847f000000000000000000000000000000000000000000000000000000000000000081565b6103c06103bb36600461132f565b6105ca565b005b6102847f000000000000000000000000000000000000000000000000000000000000000081565b6102006103f73660046113a2565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102006301e1338081565b6103c061043b3660046112ae565b6107de565b61020061082b565b606060038054610457906113d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610483906113d5565b80156104d05780601f106104a5576101008083540402835291602001916104d0565b820191906000526020600020905b8154815290600101906020018083116104b357829003601f168201915b5050505050905090565b60006104e4610950565b156104f1576104f1610987565b6104fb83836109f4565b90505b92915050565b600061050e610950565b1561051c5761051c84610a0c565b61052583610a7e565b610530848484610c43565b949350505050565b6000610542610950565b1561054f5761054f610987565b6104fb8383610c67565b606060048054610457906113d5565b6000610572610950565b1561057f5761057f610987565b6104fb8383610ca6565b6007546000906001600160a01b0316331480156105a957506105a9610950565b156105b7576105b783610d38565b6105c083610a7e565b6104fb8383610e42565b4284101561061f5760405162461bcd60e51b815260206004820152601760248201527f5a4b5553443a206578706972656420646561646c696e6500000000000000000060448201526064015b60405180910390fd5b600061062961082b565b6001600160a01b038916600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c9290919061067783611425565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016106f092919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561075b573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b0316146107c85760405162461bcd60e51b815260206004820152601860248201527f5a4b5553443a20696e76616c6964207369676e617475726500000000000000006044820152606401610616565b6107d3898989610e50565b505050505050505050565b6107e6610f74565b6107ee610950565b156107fc576107fc82610a0c565b610827827f000000000000000000000000000000000000000000000000000000000000000083611012565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000460361087957507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60006104fb828461143e565b60006104fb8284611455565b60006104fb8284611477565b6001600160a01b03163b151590565b60006301e13380610981427f0000000000000000000000000000000000000000000000000000000000000000610935565b10905090565b6007546001600160a01b031633036109f25760405162461bcd60e51b815260206004820152602860248201527f5a4b546f6b656e3a2063616c6c6572206d757374206e6f7420626520746865206044820152676d756c746973696760c01b6064820152608401610616565b565b600033610a02818585610e50565b5060019392505050565b6007546001600160a01b0390811690821603610a7b5760405162461bcd60e51b815260206004820152602860248201527f5a4b546f6b656e3a2073656e646572206d757374206e6f7420626520746865206044820152676d756c746973696760c01b6064820152608401610616565b50565b6001600160a01b03811615801590610a9f57506001600160a01b0381163014155b610b375760405162461bcd60e51b815260206004820152605060248201527f5a4b3a2043616e6e6f74207472616e7366657220746f6b656e7320646972656360448201527f746c7920746f20746865205a4b20746f6b656e20636f6e7472616374206f722060648201527f746865207a65726f206164647265737300000000000000000000000000000000608482015260a401610616565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614158015610bab57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614155b610a7b5760405162461bcd60e51b815260206004820152605160248201527f5a4b3a2043616e6e6f74207472616e7366657220746f6b656e7320646972656360448201527f746c7920746f2074686520636f6d6d756e6974792069737375616e6365206f7260648201527f207374616b696e6720636f6e7472616374000000000000000000000000000000608482015260a401610616565b600033610c518582856111b8565b610c5c858585611012565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190610a029082908690610ca190879061148a565b610e50565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919083811015610d2b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610616565b610c5c8286868403610e50565b60405163bb7603f160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063bb7603f190602401602060405180830381865afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc2919061149d565b610a7b5760405162461bcd60e51b815260206004820152604560248201527f5a4b546f6b656e3a20726563697069656e74206d7573742062652061204c6f6360448201527f6b7570436f6e7472616374207265676973746572656420696e2074686520466160648201526463746f727960d81b608482015260a401610616565b600033610a02818585611012565b6001600160a01b038316610eb25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610616565b6001600160a01b038216610f135760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610616565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109f25760405162461bcd60e51b815260206004820152602f60248201527f5a4b546f6b656e3a2063616c6c6572206d75737420626520746865205a4b545360448201527f74616b696e6720636f6e747261637400000000000000000000000000000000006064820152608401610616565b6001600160a01b0383166110765760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610616565b6001600160a01b0382166110d85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610616565b6001600160a01b038316600090815260208190526040902054818110156111505760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610616565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b50505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146111b257818110156112375760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610616565b6111b28484848403610e50565b600060208083528351808285015260005b8181101561127157858101830151858201604001528201611255565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146112a957600080fd5b919050565b600080604083850312156112c157600080fd5b6112ca83611292565b946020939093013593505050565b6000806000606084860312156112ed57600080fd5b6112f684611292565b925061130460208501611292565b9150604084013590509250925092565b60006020828403121561132657600080fd5b6104fb82611292565b600080600080600080600060e0888a03121561134a57600080fd5b61135388611292565b965061136160208901611292565b95506040880135945060608801359350608088013560ff8116811461138557600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156113b557600080fd5b6113be83611292565b91506113cc60208401611292565b90509250929050565b600181811c908216806113e957607f821691505b60208210810361140957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016114375761143761140f565b5060010190565b80820281158282048414176104fe576104fe61140f565b60008261147257634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156104fe576104fe61140f565b808201808211156104fe576104fe61140f565b6000602082840312156114af57600080fd5b815180151581146114bf57600080fd5b939250505056fea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "Returns the current ERC2612 nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases `owner`'s nonce by one. This prevents a signature from being used multiple times. `owner` can limit the time a Permit is valid for by setting `deadline` to a value in the near future. The deadline argument can be set to uint(-1) to create Permits that effectively never expire."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Sets `amount` as the allowance of `spender` over `owner`'s tokens, given `owner`'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `owner` cannot be the zero address. - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 174,
        "contract": "contracts/common/ZKToken.sol:ZKToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 180,
        "contract": "contracts/common/ZKToken.sol:ZKToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 182,
        "contract": "contracts/common/ZKToken.sol:ZKToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 184,
        "contract": "contracts/common/ZKToken.sol:ZKToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 186,
        "contract": "contracts/common/ZKToken.sol:ZKToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 5286,
        "contract": "contracts/common/ZKToken.sol:ZKToken",
        "label": "_nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4419,
        "contract": "contracts/common/ZKToken.sol:ZKToken",
        "label": "_1_MILLION",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4432,
        "contract": "contracts/common/ZKToken.sol:ZKToken",
        "label": "multisigAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}