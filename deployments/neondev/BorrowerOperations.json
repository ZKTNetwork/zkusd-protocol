{
  "address": "0xa84E7097FEB261532B91b6f551C9416659D4bfb0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        }
      ],
      "name": "CollSurplusPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        }
      ],
      "name": "DefaultPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_gasPoolAddress",
          "type": "address"
        }
      ],
      "name": "GasPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newPriceFeedAddress",
          "type": "address"
        }
      ],
      "name": "PriceFeedAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        }
      ],
      "name": "SortedTrovesAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "StabilityPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "arrayIndex",
          "type": "uint256"
        }
      ],
      "name": "TroveCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTroveManagerAddress",
          "type": "address"
        }
      ],
      "name": "TroveManagerAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IBorrowerOperations.Operation",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "TroveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_zktStakingAddress",
          "type": "address"
        }
      ],
      "name": "ZKTStakingAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ZKUSDFee",
          "type": "uint256"
        }
      ],
      "name": "ZKUSDBorrowingFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_zkusdTokenAddress",
          "type": "address"
        }
      ],
      "name": "ZKUSDTokenAddressChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_NET_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZKUSD_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "addColl",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collWithdrawal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ZKUSDChange",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isDebtIncrease",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "adjustTrove",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "contract IDefaultPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "getCompositeDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "moveNEONGainToTrove",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ZKUSDAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "openTrove",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ZKUSDAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "repayZKUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zkusdTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zktStakingAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collWithdrawal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ZKUSDAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawZKUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zktStaking",
      "outputs": [
        {
          "internalType": "contract IZKTStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zktStakingAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkusdToken",
      "outputs": [
        {
          "internalType": "contract IZKUSDToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6282cd419427e41dc64bffe0d9b4a30881898fc3c04bd92acc295dac98a36318",
  "receipt": {
    "to": null,
    "from": "0x6352ea70c6FE6c0F09Ab4d9d873E9B9C20079ffe",
    "contractAddress": "0xa84E7097FEB261532B91b6f551C9416659D4bfb0",
    "transactionIndex": 0,
    "gasUsed": "108915680",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe40c8f01eb620fef1c624e76e01c9a7ae6bf7987fb7caefecae2aed33583665b",
    "transactionHash": "0x6282cd419427e41dc64bffe0d9b4a30881898fc3c04bd92acc295dac98a36318",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 236682305,
        "transactionHash": "0x6282cd419427e41dc64bffe0d9b4a30881898fc3c04bd92acc295dac98a36318",
        "address": "0xa84E7097FEB261532B91b6f551C9416659D4bfb0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006352ea70c6fe6c0f09ab4d9d873e9b9c20079ffe"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe40c8f01eb620fef1c624e76e01c9a7ae6bf7987fb7caefecae2aed33583665b"
      }
    ],
    "blockNumber": 236682305,
    "cumulativeGasUsed": "108915680",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "035045f1e037f3a6258fc3cece2987fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"}],\"name\":\"GasPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"PriceFeedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"}],\"name\":\"TroveCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTroveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IBorrowerOperations.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TroveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_zktStakingAddress\",\"type\":\"address\"}],\"name\":\"ZKTStakingAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ZKUSDFee\",\"type\":\"uint256\"}],\"name\":\"ZKUSDBorrowingFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_zkusdTokenAddress\",\"type\":\"address\"}],\"name\":\"ZKUSDTokenAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZKUSD_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"addColl\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ZKUSDChange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIncrease\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"adjustTrove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getCompositeDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"moveNEONGainToTrove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ZKUSDAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"openTrove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ZKUSDAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"repayZKUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zkusdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zktStakingAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ZKUSDAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawZKUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zktStaking\",\"outputs\":[{\"internalType\":\"contract IZKTStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zktStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkusdToken\",\"outputs\":[{\"internalType\":\"contract IZKUSDToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimCollateral()\":{\"notice\":\"Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/BorrowerOperations.sol\":\"BorrowerOperations\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n        require(\\n            Address.isContract(_account),\\n            \\\"Account code size cannot be zero\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xaf457c01990a35e69f187bbaa4daceb410b624d7c34029246b54333816a4bba7\",\"license\":\"MIT\"},\"contracts/dependencies/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary FullMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant DECIMAL_PRECISION = 1e18;\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 NEON,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint256 internal constant NICR_PRECISION = 1e20;\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 decProd) {\\n        uint256 prod_xy = x.mul(y);\\n\\n        decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) FullManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n     */\\n    function _decPow(\\n        uint256 _base,\\n        uint256 _minutes\\n    ) internal pure returns (uint256) {\\n        if (_minutes > 525600000) {\\n            _minutes = 525600000;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint256 y = DECIMAL_PRECISION;\\n        uint256 x = _base;\\n        uint256 n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n.div(2);\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n.sub(1)).div(2);\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(\\n        uint256 _a,\\n        uint256 _b\\n    ) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n    }\\n\\n    function _computeNominalCR(\\n        uint256 _coll,\\n        uint256 _debt\\n    ) internal pure returns (uint256) {\\n        if (_debt > 0) {\\n            return _coll.mul(NICR_PRECISION).div(_debt);\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n\\n    function _computeCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _price\\n    ) internal pure returns (uint256) {\\n        if (_debt > 0) {\\n            uint256 newCollRatio = _coll.mul(_price).div(_debt);\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x371483b35a8171382c93c59d446f040b1b8b86bb2e205bd315d34b67ce389b4e\",\"license\":\"MIT\"},\"contracts/dependencies/ZKTProtocolBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"./FullMath.sol\\\";\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\nabstract contract ZKTProtocolBase {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant DECIMAL_PRECISION = 1e18;\\n\\n    uint256 public constant _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint256 public constant MCR = 1100000000000000000; // 110%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint256 public constant CCR = 1500000000000000000; // 150%\\n\\n    // Amount of ZKUSD to be locked in gas pool on opening troves\\n    uint256 public constant ZKUSD_GAS_COMPENSATION = 50e18;\\n\\n    // Minimum amount of net ZKUSD debt a trove must have\\n    uint256 public constant MIN_NET_DEBT = 450e18;\\n\\n    uint256 public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    uint256 public constant BORROWING_FEE_FLOOR =\\n        (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n\\n    IActivePool public activePool;\\n\\n    IDefaultPool public defaultPool;\\n\\n    IPriceFeed public priceFeed;\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint256 _debt) internal pure returns (uint256) {\\n        return _debt.add(ZKUSD_GAS_COMPENSATION);\\n    }\\n\\n    function _getNetDebt(uint256 _debt) internal pure returns (uint256) {\\n        return _debt.sub(ZKUSD_GAS_COMPENSATION);\\n    }\\n\\n    // Return the amount of NEON to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(\\n        uint256 _entireColl\\n    ) internal pure returns (uint256) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n\\n    function getEntireSystemColl()\\n        public\\n        view\\n        returns (uint256 entireSystemColl)\\n    {\\n        uint256 activeColl = activePool.getNEON();\\n        uint256 liquidatedColl = defaultPool.getNEON();\\n\\n        return activeColl.add(liquidatedColl);\\n    }\\n\\n    function getEntireSystemDebt()\\n        public\\n        view\\n        returns (uint256 entireSystemDebt)\\n    {\\n        uint256 activeDebt = activePool.getZKUSDDebt();\\n        uint256 closedDebt = defaultPool.getZKUSDDebt();\\n\\n        return activeDebt.add(closedDebt);\\n    }\\n\\n    function _getTCR(uint256 _price) internal view returns (uint256 TCR) {\\n        uint256 entireSystemColl = getEntireSystemColl();\\n        uint256 entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = FullMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\n\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint256 _price) internal view returns (bool) {\\n        uint256 TCR = _getTCR(_price);\\n\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint256 _fee,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    ) internal pure {\\n        uint256 feePercentage = _fee.mul(DECIMAL_PRECISION).div(_amount);\\n        require(\\n            feePercentage <= _maxFeePercentage,\\n            \\\"Fee exceeded provided maximum\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x065532b6a683f3a6487a35bcd07d05007c3d7921c1a7d2dbef6ceaa23eaf2bd5\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolZKUSDDebtUpdated(uint256 _ZKUSDDebt);\\n    event ActivePoolNEONBalanceUpdated(uint256 _NEON);\\n\\n    // --- Functions ---\\n    function sendNEON(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x666016f4a4f781312317f182c462fd5624935f42275cbe3ea42e5a8a71d3fde3\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ITroveManager.sol\\\";\\nimport \\\"./IZKUSDToken.sol\\\";\\nimport \\\"./IActivePool.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n    /* --- Variable container structs  ---\\n\\n    Used to hold, return and assign variables inside a function, in order to avoid the error:\\n    \\\"CompilerError: Stack too deep\\\". */\\n\\n    struct LocalVariables_adjustTrove {\\n        uint256 price;\\n        uint256 collChange;\\n        uint256 netDebtChange;\\n        bool isCollIncrease;\\n        uint256 debt;\\n        uint256 coll;\\n        uint256 oldICR;\\n        uint256 newICR;\\n        uint256 newTCR;\\n        uint256 ZKUSDFee;\\n        uint256 newDebt;\\n        uint256 newColl;\\n        uint256 stake;\\n    }\\n\\n    struct LocalVariables_openTrove {\\n        uint256 price;\\n        uint256 ZKUSDFee;\\n        uint256 netDebt;\\n        uint256 compositeDebt;\\n        uint256 ICR;\\n        uint256 NICR;\\n        uint256 stake;\\n        uint256 arrayIndex;\\n    }\\n\\n    struct ContractsCache {\\n        ITroveManager troveManager;\\n        IActivePool activePool;\\n        IZKUSDToken zkusdToken;\\n    }\\n\\n    enum Operation {\\n        openTrove,\\n        closeTrove,\\n        adjustTrove\\n    }\\n\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event ZKUSDTokenAddressChanged(address _zkusdTokenAddress);\\n    event ZKTStakingAddressChanged(address _zktStakingAddress);\\n\\n    event TroveCreated(address indexed _borrower, uint256 arrayIndex);\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 stake,\\n        Operation operation\\n    );\\n    event ZKUSDBorrowingFeePaid(address indexed _borrower, uint256 _ZKUSDFee);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _zkusdTokenAddress,\\n        address _zktStakingAddress\\n    ) external;\\n\\n    function openTrove(\\n        uint256 _maxFee,\\n        uint256 _ZKUSDAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function addColl(address _upperHint, address _lowerHint) external payable;\\n\\n    function moveNEONGainToTrove(\\n        address _user,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function withdrawColl(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function withdrawZKUSD(\\n        uint256 _maxFee,\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function repayZKUSD(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function closeTrove() external;\\n\\n    function adjustTrove(\\n        uint256 _maxFee,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function claimCollateral() external;\\n\\n    function getCompositeDebt(uint256 _debt) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0xc947332551f4b1f5bbe30da1d4223885608525191a31bcc5910ef8e3a5bcb3e4\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\n    event EtherSent(address _to, uint256 _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function getNEON() external view returns (uint256);\\n\\n    function getCollateral(address _account) external view returns (uint256);\\n\\n    function accountSurplus(address _account, uint256 _amount) external;\\n\\n    function claimColl(address _account) external;\\n}\\n\",\"keccak256\":\"0x48ed7d74ad9192d4776774de0b94bbe8a1810708d96a109a002f857983c626f5\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolZKUSDDebtUpdated(uint256 _ZKUSDDebt);\\n    event DefaultPoolNEONBalanceUpdated(uint256 _NEON);\\n\\n    // --- Functions ---\\n    function sendNEONToActivePool(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x14e6882c102f3e4202dbb70723dc9b9acc57d915bab2c53e28724a7edf7389c5\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event NEONBalanceUpdated(uint256 _newBalance);\\n    event ZKUSDBalanceUpdated(uint256 _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event EtherSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function getNEON() external view returns (uint256);\\n\\n    function getZKUSDDebt() external view returns (uint256);\\n\\n    function increaseZKUSDDebt(uint256 _amount) external;\\n\\n    function decreaseZKUSDDebt(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x23480740f7ee57233e104ccb5282cbdfb9380d53d5c33eed74d655159bc4edee\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint256 _lastGoodPrice);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x7f24553ec892c12c1d924bfb1ae70a127ce520c46529631dee6b2ee1b248b6ff\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event UpdateLink(address _head, address _tail, uint256 _currentSize);\\n    event NodeAdded(\\n        address _id,\\n        address _prevId,\\n        address _nextId,\\n        uint256 _NICR\\n    );\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function insert(\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    function findInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0x929f7b0a20d29c02088a0be525c1974966415083a343b2a509a501800dd139a5\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n * The Stability Pool holds ZKUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its ZKUSD debt gets offset with\\n * ZKUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of ZKUSD tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a ZKUSD loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an NEON gain, as the NEON collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total ZKUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * --- ZKT ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * An ZKT issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued ZKT in proportion to the deposit as a share of total deposits. The ZKT earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolNEONBalanceUpdated(uint256 _newBalance);\\n    event StabilityPoolZKUSDBalanceUpdated(uint256 _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event ZKUSDTokenAddressChanged(address _newZKUSDTokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint256 _P);\\n    event S_Updated(uint256 _S, uint256 _epoch, uint256 _scale);\\n    event G_Updated(uint256 _G, uint256 _epoch, uint256 _scale);\\n    event EpochUpdated(uint256 _currentEpoch);\\n    event ScaleUpdated(uint256 _currentScale);\\n\\n    event FrontEndRegistered(address indexed _frontEnd, uint256 _kickbackRate);\\n    event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint256 _P,\\n        uint256 _S,\\n        uint256 _G\\n    );\\n    event FrontEndSnapshotUpdated(\\n        address indexed _frontEnd,\\n        uint256 _P,\\n        uint256 _G\\n    );\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n    event FrontEndStakeChanged(\\n        address indexed _frontEnd,\\n        uint256 _newFrontEndStake,\\n        address _depositor\\n    );\\n\\n    event NEONGainWithdrawn(\\n        address indexed _depositor,\\n        uint256 _NEON,\\n        uint256 _ZKUSDLoss\\n    );\\n    event ZKTPaidToDepositor(address indexed _depositor, uint256 _ZKT);\\n    event ZKTPaidToFrontEnd(address indexed _frontEnd, uint256 _ZKT);\\n    event EtherSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Liquity contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _zkusdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress,\\n        address _vault\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a ZKT issuance, based on time passed since the last issuance. The ZKT issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (ZKT, NEON) to depositor\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a ZKT issuance, based on time passed since the last issuance. The ZKT issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's accumulated gains (ZKT, NEON) to depositor\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some NEON gain\\n     * ---\\n     * - Triggers a ZKT issuance, based on time passed since the last issuance. The ZKT issuance is shared between *all* depositors\\n     * - Sends all depositor's ZKT gain to  depositor\\n     * - Transfers the depositor's entire NEON gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged\\n     */\\n    function withdrawNEONGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the ZKUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's NEON collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint256 _debt, uint256 _coll) external;\\n\\n    /*\\n     * Returns the total amount of NEON held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like NEON received from a self-destruct.\\n     */\\n    function getNEON() external view returns (uint256);\\n\\n    /*\\n     * Returns ZKUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalZKUSDDeposits() external view returns (uint256);\\n\\n    /*\\n     * Calculates the NEON gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorNEONGain(\\n        address _depositor\\n    ) external view returns (uint256);\\n\\n    /*\\n     * Calculate the ZKT gain earned by a deposit since its last snapshots were taken.\\n     * The depositor gets a 99.9% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the defaultKickbackRate\\n     * which they made their deposit.\\n     */\\n    function getDepositorZKTGain(\\n        address _depositor\\n    ) external view returns (uint256);\\n\\n    /*\\n     * Return the ZKT gain earned by the front end(depositor).\\n     */\\n    function getFrontEndZKTGain(\\n        address _frontEnd\\n    ) external view returns (uint256);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedZKUSDDeposit(\\n        address _depositor\\n    ) external view returns (uint256);\\n\\n    /*\\n     * Return the front end's compounded stake.\\n     *\\n     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n     */\\n    function getCompoundedFrontEndStake(\\n        address _frontEnd\\n    ) external view returns (uint256);\\n\\n    /*\\n     * Fallback function\\n     * Only callable by Active Pool, it just accounts for NEON received\\n     * receive() external payable;\\n     */\\n}\\n\",\"keccak256\":\"0xe2c01f7bbba4d3bedb03804d9362c40cfd77e352f2265e913bb9dd3bf4742a37\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IZKUSDToken.sol\\\";\\nimport \\\"./IZKToken.sol\\\";\\nimport \\\"./IZKTStaking.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event ZKUSDTokenAddressChanged(address _newZKUSDTokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event ZKTokenAddressChanged(address _zkTokenAddress);\\n    event ZKTStakingAddressChanged(address _zktStakingAddress);\\n\\n    event Liquidation(\\n        uint256 _liquidatedDebt,\\n        uint256 _liquidatedColl,\\n        uint256 _collGasCompensation,\\n        uint256 _ZKUSDGasCompensation\\n    );\\n    event Redemption(\\n        uint256 _attemptedZKUSDAmount,\\n        uint256 _actualZKUSDAmount,\\n        uint256 _NEONSent,\\n        uint256 _NEONFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 stake,\\n        Operation operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        Operation operation\\n    );\\n    event BaseRateUpdated(uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint256 _totalStakesSnapshot,\\n        uint256 _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(uint256 _L_Native, uint256 _L_Debt);\\n    event TroveSnapshotsUpdated(\\n        address _borrower,\\n        uint256 _L_Native,\\n        uint256 _L_Debt\\n    );\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n    enum Operation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _zkusdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _zkTokenAddress,\\n        address _zktStakingAddress\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function zkusdToken() external view returns (IZKUSDToken);\\n\\n    function zkToken() external view returns (IZKToken);\\n\\n    function zktStaking() external view returns (IZKTStaking);\\n\\n    function getTroveOwnersCount() external view returns (uint256);\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint256 _index\\n    ) external view returns (address);\\n\\n    function getNominalICR(address _borrower) external view returns (uint256);\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint256 _price\\n    ) external view returns (uint256);\\n\\n    function liquidate(address _borrower) external;\\n\\n    function liquidateTroves(uint256 _n) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint256 _ZKUSDAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFee\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint256);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint256 index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function getPendingNEONReward(\\n        address _borrower\\n    ) external view returns (uint256);\\n\\n    function getPendingZKUSDDebtReward(\\n        address _borrower\\n    ) external view returns (uint256);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 debt,\\n            uint256 coll,\\n            uint256 pendingZKUSDDebtReward,\\n            uint256 pendingNEONReward\\n        );\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function getRedemptionRate() external view returns (uint256);\\n\\n    function getRedemptionRateWithDecay() external view returns (uint256);\\n\\n    function getRedemptionFeeWithDecay(\\n        uint256 _NEONDrawn\\n    ) external view returns (uint256);\\n\\n    function getBorrowingRate() external view returns (uint256);\\n\\n    function getBorrowingRateWithDecay() external view returns (uint256);\\n\\n    function getBorrowingFee(uint256 ZKUSDDebt) external view returns (uint256);\\n\\n    function getBorrowingFeeWithDecay(\\n        uint256 _ZKUSDDebt\\n    ) external view returns (uint256);\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function getTroveStatus(address _borrower) external view returns (uint256);\\n\\n    function getTroveStake(address _borrower) external view returns (uint256);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint256);\\n\\n    function getTroveColl(address _borrower) external view returns (uint256);\\n\\n    function setTroveStatus(address _borrower, uint256 num) external;\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint256 _collIncrease\\n    ) external returns (uint256);\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint256 _collDecrease\\n    ) external returns (uint256);\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtIncrease\\n    ) external returns (uint256);\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint256 _collDecrease\\n    ) external returns (uint256);\\n\\n    function getTCR(uint256 _price) external view returns (uint256);\\n\\n    function checkRecoveryMode(uint256 _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe7e3d5da3fbf34b6681c0263fb61939584c66b7278a68d0d9522bf6125731dce\",\"license\":\"MIT\"},\"contracts/interfaces/IZKTStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IZKTStaking {\\n    // --- Events --\\n\\n    event ZKTokenAddressSet(address _zkTokenAddress);\\n    event ZKUSDTokenAddressSet(address _zkusdTokenAddress);\\n    event TroveManagerAddressSet(address _troveManager);\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\n    event ActivePoolAddressSet(address _activePoolAddress);\\n\\n    event StakeChanged(address indexed staker, uint256 newStake);\\n    event StakingGainsWithdrawn(\\n        address indexed staker,\\n        uint256 ZKUSDGain,\\n        uint256 NEONGain\\n    );\\n    event F_NEONUpdated(uint256 _F_NEON);\\n    event F_ZKUSDUpdated(uint256 _F_ZKUSD);\\n    event TotalZKTStakedUpdated(uint256 _totalZKTStaked);\\n    event EtherSent(address _account, uint256 _amount);\\n    event StakerSnapshotsUpdated(\\n        address _staker,\\n        uint256 _F_NEON,\\n        uint256 _F_ZKUSD\\n    );\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _zkTokenAddress,\\n        address _zkusdTokenAddress,\\n        address _troveManagerAddress,\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function stake(uint256 _ZKTamount) external;\\n\\n    function unstake(uint256 _ZKTamount) external;\\n\\n    function increaseF_NEON(uint256 _NEONFee) external;\\n\\n    function increaseF_ZKUSD(uint256 _ZKTFee) external;\\n\\n    function getPendingNEONGain(address _user) external view returns (uint256);\\n\\n    function getPendingZKUSDGain(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5591bb74cca2ed6a0f5c74f37b9225f135196701b6757b49ff2cbad65a146d39\",\"license\":\"MIT\"},\"contracts/interfaces/IZKToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZKToken is IERC20 {\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n    event ZKTStakingAddressSet(address _zktStakingAddress);\\n    event LockupContractFactoryAddressSet(\\n        address _lockupContractFactoryAddress\\n    );\\n\\n    // --- Functions ---\\n\\n    function sendToZKTStaking(address _sender, uint256 _amount) external;\\n\\n    function getDeploymentStartTime() external view returns (uint256);\\n\\n    function getLpRewardsEntitlement() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2957d7a9ae4c53d2454e688c1111a7e29dc267b8e80194acf18656b0330b9c44\",\"license\":\"MIT\"},\"contracts/interfaces/IZKUSDToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZKUSDToken is IERC20 {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n\\n    event ZKUSDTokenBalanceUpdated(address _user, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(\\n        address _sender,\\n        address poolAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function returnFromPool(\\n        address poolAddress,\\n        address user,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1afab6f094020dd27c3a32ea57339982705d7e599f953e85641c59bbc57bcaec\",\"license\":\"MIT\"},\"contracts/protocol/BorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"../interfaces/ITroveManager.sol\\\";\\nimport \\\"../interfaces/IZKUSDToken.sol\\\";\\nimport \\\"../interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"../interfaces/ISortedTroves.sol\\\";\\nimport \\\"../interfaces/IZKTStaking.sol\\\";\\nimport \\\"../dependencies/CheckContract.sol\\\";\\nimport \\\"../dependencies/FullMath.sol\\\";\\nimport \\\"../dependencies/ZKTProtocolBase.sol\\\";\\n\\ncontract BorrowerOperations is\\n    IBorrowerOperations,\\n    ZKTProtocolBase,\\n    CheckContract,\\n    Ownable\\n{\\n    using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"BorrowerOperations\\\";\\n\\n    // --- Connected contract declarations ---\\n\\n    ITroveManager public troveManager;\\n\\n    address stabilityPoolAddress;\\n\\n    address gasPoolAddress;\\n\\n    ICollSurplusPool collSurplusPool;\\n\\n    IZKTStaking public zktStaking;\\n    address public zktStakingAddress;\\n\\n    IZKUSDToken public zkusdToken;\\n\\n    // A doubly linked list of Troves, sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    // --- Dependency setters ---\\n\\n    function setAddresses(\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _zkusdTokenAddress,\\n        address _zktStakingAddress\\n    ) external override onlyOwner {\\n        // This makes impossible to open a trove with zero withdrawn ZKUSD\\n        assert(MIN_NET_DEBT > 0);\\n\\n        checkContract(_troveManagerAddress);\\n        checkContract(_activePoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_gasPoolAddress);\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_priceFeedAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_zkusdTokenAddress);\\n        checkContract(_zktStakingAddress);\\n\\n        troveManager = ITroveManager(_troveManagerAddress);\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        stabilityPoolAddress = _stabilityPoolAddress;\\n        gasPoolAddress = _gasPoolAddress;\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        zkusdToken = IZKUSDToken(_zkusdTokenAddress);\\n        zktStakingAddress = _zktStakingAddress;\\n        zktStaking = IZKTStaking(_zktStakingAddress);\\n\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit GasPoolAddressChanged(_gasPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit ZKUSDTokenAddressChanged(_zkusdTokenAddress);\\n        emit ZKTStakingAddressChanged(_zktStakingAddress);\\n\\n        //renounceOwnership();\\n    }\\n\\n    // --- Borrower Trove Operations ---\\n\\n    function openTrove(\\n        uint _maxFeePercentage,\\n        uint _ZKUSDAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable override {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            troveManager,\\n            activePool,\\n            zkusdToken\\n        );\\n        LocalVariables_openTrove memory vars;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        bool isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\n        _requireTroveisNotActive(contractsCache.troveManager, msg.sender);\\n\\n        vars.ZKUSDFee;\\n        vars.netDebt = _ZKUSDAmount;\\n\\n        if (!isRecoveryMode) {\\n            vars.ZKUSDFee = _triggerBorrowingFee(\\n                contractsCache.troveManager,\\n                contractsCache.zkusdToken,\\n                _ZKUSDAmount,\\n                _maxFeePercentage\\n            );\\n            vars.netDebt = vars.netDebt.add(vars.ZKUSDFee);\\n        }\\n        _requireAtLeastMinNetDebt(vars.netDebt);\\n\\n        // ICR is based on the composite debt, i.e. the requested ZKUSD amount + ZKUSD borrowing fee + ZKUSD gas comp.\\n        vars.compositeDebt = _getCompositeDebt(vars.netDebt);\\n        assert(vars.compositeDebt > 0);\\n\\n        vars.ICR = FullMath._computeCR(\\n            msg.value,\\n            vars.compositeDebt,\\n            vars.price\\n        );\\n        vars.NICR = FullMath._computeNominalCR(msg.value, vars.compositeDebt);\\n\\n        if (isRecoveryMode) {\\n            _requireICRisAboveCCR(vars.ICR);\\n        } else {\\n            _requireICRisAboveMCR(vars.ICR);\\n            uint newTCR = _getNewTCRFromTroveChange(\\n                msg.value,\\n                true,\\n                vars.compositeDebt,\\n                true,\\n                vars.price\\n            ); // bools: coll increase, debt increase\\n            _requireNewTCRisAboveCCR(newTCR);\\n        }\\n\\n        // Set the trove struct's properties\\n        contractsCache.troveManager.setTroveStatus(msg.sender, 1);\\n        contractsCache.troveManager.increaseTroveColl(msg.sender, msg.value);\\n        contractsCache.troveManager.increaseTroveDebt(\\n            msg.sender,\\n            vars.compositeDebt\\n        );\\n\\n        contractsCache.troveManager.updateTroveRewardSnapshots(msg.sender);\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(\\n            msg.sender\\n        );\\n\\n        sortedTroves.insert(msg.sender, vars.NICR, _upperHint, _lowerHint);\\n        vars.arrayIndex = contractsCache.troveManager.addTroveOwnerToArray(\\n            msg.sender\\n        );\\n        emit TroveCreated(msg.sender, vars.arrayIndex);\\n\\n        // Move the ether to the Active Pool, and mint the ZKUSDAmount to the borrower\\n        _activePoolAddColl(contractsCache.activePool, msg.value);\\n        _withdrawZKUSD(\\n            contractsCache.activePool,\\n            contractsCache.zkusdToken,\\n            msg.sender,\\n            _ZKUSDAmount,\\n            vars.netDebt\\n        );\\n        // Move the ZKUSD gas compensation to the Gas Pool\\n        _withdrawZKUSD(\\n            contractsCache.activePool,\\n            contractsCache.zkusdToken,\\n            gasPoolAddress,\\n            ZKUSD_GAS_COMPENSATION,\\n            ZKUSD_GAS_COMPENSATION\\n        );\\n\\n        emit TroveUpdated(\\n            msg.sender,\\n            vars.compositeDebt,\\n            msg.value,\\n            vars.stake,\\n            Operation.openTrove\\n        );\\n        emit ZKUSDBorrowingFeePaid(msg.sender, vars.ZKUSDFee);\\n    }\\n\\n    // Send NEON as collateral to a trove\\n    function addColl(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable override {\\n        _adjustTrove(msg.sender, 0, 0, false, _upperHint, _lowerHint, 0);\\n    }\\n\\n    // Send NEON as collateral to a trove. Called by only the Stability Pool.\\n    function moveNEONGainToTrove(\\n        address _borrower,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable override {\\n        _requireCallerIsStabilityPool();\\n        _adjustTrove(_borrower, 0, 0, false, _upperHint, _lowerHint, 0);\\n    }\\n\\n    // Withdraw NEON collateral from a trove\\n    function withdrawColl(\\n        uint _collWithdrawal,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _adjustTrove(\\n            msg.sender,\\n            _collWithdrawal,\\n            0,\\n            false,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    // Withdraw ZKUSD tokens from a trove: mint new ZKUSD tokens to the owner, and increase the trove's debt accordingly\\n    function withdrawZKUSD(\\n        uint _maxFeePercentage,\\n        uint _ZKUSDAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _adjustTrove(\\n            msg.sender,\\n            0,\\n            _ZKUSDAmount,\\n            true,\\n            _upperHint,\\n            _lowerHint,\\n            _maxFeePercentage\\n        );\\n    }\\n\\n    // Repay ZKUSD tokens to a Trove: Burn the repaid ZKUSD tokens, and reduce the trove's debt accordingly\\n    function repayZKUSD(\\n        uint _ZKUSDAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _adjustTrove(\\n            msg.sender,\\n            0,\\n            _ZKUSDAmount,\\n            false,\\n            _upperHint,\\n            _lowerHint,\\n            0\\n        );\\n    }\\n\\n    function adjustTrove(\\n        uint _maxFeePercentage,\\n        uint _collWithdrawal,\\n        uint _ZKUSDChange,\\n        bool _isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable override {\\n        _adjustTrove(\\n            msg.sender,\\n            _collWithdrawal,\\n            _ZKUSDChange,\\n            _isDebtIncrease,\\n            _upperHint,\\n            _lowerHint,\\n            _maxFeePercentage\\n        );\\n    }\\n\\n    /*\\n     * _adjustTrove(): Alongside a debt change, this function can perform either a collateral top-up or a collateral withdrawal.\\n     *\\n     * It therefore expects either a positive msg.value, or a positive _collWithdrawal argument.\\n     *\\n     * If both are positive, it will revert.\\n     */\\n    function _adjustTrove(\\n        address _borrower,\\n        uint _collWithdrawal,\\n        uint _ZKUSDChange,\\n        bool _isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint,\\n        uint _maxFeePercentage\\n    ) internal {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            troveManager,\\n            activePool,\\n            zkusdToken\\n        );\\n        LocalVariables_adjustTrove memory vars;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        bool isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n        if (_isDebtIncrease) {\\n            _requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\n            _requireNonZeroDebtChange(_ZKUSDChange);\\n        }\\n        _requireSingularCollChange(_collWithdrawal);\\n        _requireNonZeroAdjustment(_collWithdrawal, _ZKUSDChange);\\n        _requireTroveisActive(contractsCache.troveManager, _borrower);\\n\\n        // Confirm the operation is either a borrower adjusting their own trove, or a pure NEON transfer from the Stability Pool to a trove\\n        assert(\\n            msg.sender == _borrower ||\\n                (msg.sender == stabilityPoolAddress &&\\n                    msg.value > 0 &&\\n                    _ZKUSDChange == 0)\\n        );\\n\\n        contractsCache.troveManager.applyPendingRewards(_borrower);\\n\\n        // Get the collChange based on whether or not NEON was sent in the transaction\\n        (vars.collChange, vars.isCollIncrease) = _getCollChange(\\n            msg.value,\\n            _collWithdrawal\\n        );\\n\\n        vars.netDebtChange = _ZKUSDChange;\\n\\n        // If the adjustment incorporates a debt increase and system is in Normal Mode, then trigger a borrowing fee\\n        if (_isDebtIncrease && !isRecoveryMode) {\\n            vars.ZKUSDFee = _triggerBorrowingFee(\\n                contractsCache.troveManager,\\n                contractsCache.zkusdToken,\\n                _ZKUSDChange,\\n                _maxFeePercentage\\n            );\\n            vars.netDebtChange = vars.netDebtChange.add(vars.ZKUSDFee); // The raw debt change includes the fee\\n        }\\n\\n        vars.debt = contractsCache.troveManager.getTroveDebt(_borrower);\\n        vars.coll = contractsCache.troveManager.getTroveColl(_borrower);\\n\\n        // Get the trove's old ICR before the adjustment, and what its new ICR will be after the adjustment\\n        vars.oldICR = FullMath._computeCR(vars.coll, vars.debt, vars.price);\\n        vars.newICR = _getNewICRFromTroveChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease,\\n            vars.price\\n        );\\n        assert(_collWithdrawal <= vars.coll);\\n\\n        // Check the adjustment satisfies all conditions for the current system mode\\n        _requireValidAdjustmentInCurrentMode(\\n            isRecoveryMode,\\n            _collWithdrawal,\\n            _isDebtIncrease,\\n            vars\\n        );\\n\\n        // When the adjustment is a debt repayment, check it's a valid amount and that the caller has enough ZKUSD\\n        if (!_isDebtIncrease && _ZKUSDChange > 0) {\\n            _requireAtLeastMinNetDebt(\\n                _getNetDebt(vars.debt).sub(vars.netDebtChange)\\n            );\\n            _requireValidZKUSDRepayment(vars.debt, vars.netDebtChange);\\n            _requireSufficientZKUSDBalance(\\n                contractsCache.zkusdToken,\\n                _borrower,\\n                vars.netDebtChange\\n            );\\n        }\\n\\n        (vars.newColl, vars.newDebt) = _updateTroveFromAdjustment(\\n            contractsCache.troveManager,\\n            _borrower,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(\\n            _borrower\\n        );\\n\\n        // Re-insert trove in to the sorted list\\n        uint newNICR = _getNewNominalICRFromTroveChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        sortedTroves.reInsert(_borrower, newNICR, _upperHint, _lowerHint);\\n\\n        emit TroveUpdated(\\n            _borrower,\\n            vars.newDebt,\\n            vars.newColl,\\n            vars.stake,\\n            Operation.adjustTrove\\n        );\\n        emit ZKUSDBorrowingFeePaid(msg.sender, vars.ZKUSDFee);\\n\\n        // Use the unmodified _ZKUSDChange here, as we don't send the fee to the user\\n        _moveTokensAndNEONfromAdjustment(\\n            contractsCache.activePool,\\n            contractsCache.zkusdToken,\\n            msg.sender,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            _ZKUSDChange,\\n            _isDebtIncrease,\\n            vars.netDebtChange\\n        );\\n    }\\n\\n    function closeTrove() external override {\\n        ITroveManager troveManagerCached = troveManager;\\n        IActivePool activePoolCached = activePool;\\n        IZKUSDToken zkusdTokenCached = zkusdToken;\\n\\n        _requireTroveisActive(troveManagerCached, msg.sender);\\n        uint price = priceFeed.fetchPrice();\\n        _requireNotInRecoveryMode(price);\\n\\n        troveManagerCached.applyPendingRewards(msg.sender);\\n\\n        uint coll = troveManagerCached.getTroveColl(msg.sender);\\n        uint debt = troveManagerCached.getTroveDebt(msg.sender);\\n\\n        _requireSufficientZKUSDBalance(\\n            zkusdTokenCached,\\n            msg.sender,\\n            debt.sub(ZKUSD_GAS_COMPENSATION)\\n        );\\n\\n        uint newTCR = _getNewTCRFromTroveChange(\\n            coll,\\n            false,\\n            debt,\\n            false,\\n            price\\n        );\\n        _requireNewTCRisAboveCCR(newTCR);\\n\\n        troveManagerCached.removeStake(msg.sender);\\n        troveManagerCached.closeTrove(msg.sender);\\n\\n        emit TroveUpdated(msg.sender, 0, 0, 0, Operation.closeTrove);\\n\\n        // Burn the repaid ZKUSD from the user's balance and the gas compensation from the Gas Pool\\n        _repayZKUSD(\\n            activePoolCached,\\n            zkusdTokenCached,\\n            msg.sender,\\n            debt.sub(ZKUSD_GAS_COMPENSATION)\\n        );\\n        _repayZKUSD(\\n            activePoolCached,\\n            zkusdTokenCached,\\n            gasPoolAddress,\\n            ZKUSD_GAS_COMPENSATION\\n        );\\n\\n        // Send the collateral back to the user\\n        activePoolCached.sendNEON(msg.sender, coll);\\n    }\\n\\n    /**\\n     * Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\\n     */\\n    function claimCollateral() external override {\\n        // send NEON from CollSurplus Pool to owner\\n        collSurplusPool.claimColl(msg.sender);\\n    }\\n\\n    // --- Helper functions ---\\n\\n    function _triggerBorrowingFee(\\n        ITroveManager _troveManager,\\n        IZKUSDToken _zkusdToken,\\n        uint _ZKUSDAmount,\\n        uint _maxFeePercentage\\n    ) internal returns (uint) {\\n        _troveManager.decayBaseRateFromBorrowing(); // decay the baseRate state variable\\n        uint ZKUSDFee = _troveManager.getBorrowingFee(_ZKUSDAmount);\\n\\n        _requireUserAcceptsFee(ZKUSDFee, _ZKUSDAmount, _maxFeePercentage);\\n\\n        // Send fee to ZK staking contract\\n        zktStaking.increaseF_ZKUSD(ZKUSDFee);\\n        _zkusdToken.mint(zktStakingAddress, ZKUSDFee);\\n\\n        return ZKUSDFee;\\n    }\\n\\n    function _getUSDValue(\\n        uint _coll,\\n        uint _price\\n    ) internal pure returns (uint) {\\n        uint usdValue = _price.mul(_coll).div(DECIMAL_PRECISION);\\n\\n        return usdValue;\\n    }\\n\\n    function _getCollChange(\\n        uint _collReceived,\\n        uint _requestedCollWithdrawal\\n    ) internal pure returns (uint collChange, bool isCollIncrease) {\\n        if (_collReceived != 0) {\\n            collChange = _collReceived;\\n            isCollIncrease = true;\\n        } else {\\n            collChange = _requestedCollWithdrawal;\\n        }\\n    }\\n\\n    // Update trove's coll and debt based on whether they increase or decrease\\n    function _updateTroveFromAdjustment(\\n        ITroveManager _troveManager,\\n        address _borrower,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease\\n    ) internal returns (uint, uint) {\\n        uint newColl = (_isCollIncrease)\\n            ? _troveManager.increaseTroveColl(_borrower, _collChange)\\n            : _troveManager.decreaseTroveColl(_borrower, _collChange);\\n        uint newDebt = (_isDebtIncrease)\\n            ? _troveManager.increaseTroveDebt(_borrower, _debtChange)\\n            : _troveManager.decreaseTroveDebt(_borrower, _debtChange);\\n\\n        return (newColl, newDebt);\\n    }\\n\\n    function _moveTokensAndNEONfromAdjustment(\\n        IActivePool _activePool,\\n        IZKUSDToken _zkusdToken,\\n        address _borrower,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _ZKUSDChange,\\n        bool _isDebtIncrease,\\n        uint _netDebtChange\\n    ) internal {\\n        if (_isDebtIncrease) {\\n            _withdrawZKUSD(\\n                _activePool,\\n                _zkusdToken,\\n                _borrower,\\n                _ZKUSDChange,\\n                _netDebtChange\\n            );\\n        } else {\\n            _repayZKUSD(_activePool, _zkusdToken, _borrower, _ZKUSDChange);\\n        }\\n\\n        if (_isCollIncrease) {\\n            _activePoolAddColl(_activePool, _collChange);\\n        } else {\\n            _activePool.sendNEON(_borrower, _collChange);\\n        }\\n    }\\n\\n    // Send NEON to Active Pool and increase its recorded NEON balance\\n    function _activePoolAddColl(\\n        IActivePool _activePool,\\n        uint _amount\\n    ) internal {\\n        (bool success, ) = address(_activePool).call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Operation: Sending NEON to ActivePool failed\\\");\\n    }\\n\\n    // Issue the specified amount of ZKUSD to _account and increases the total active debt (_netDebtIncrease potentially includes a ZKUSDFee)\\n    function _withdrawZKUSD(\\n        IActivePool _activePool,\\n        IZKUSDToken _zkusdToken,\\n        address _account,\\n        uint _ZKUSDAmount,\\n        uint _netDebtIncrease\\n    ) internal {\\n        _activePool.increaseZKUSDDebt(_netDebtIncrease);\\n        _zkusdToken.mint(_account, _ZKUSDAmount);\\n    }\\n\\n    // Burn the specified amount of ZKUSD from _account and decreases the total active debt\\n    function _repayZKUSD(\\n        IActivePool _activePool,\\n        IZKUSDToken _zkusdToken,\\n        address _account,\\n        uint _ZKUSD\\n    ) internal {\\n        _activePool.decreaseZKUSDDebt(_ZKUSD);\\n        _zkusdToken.burn(_account, _ZKUSD);\\n    }\\n\\n    // --- 'Require' wrapper functions ---\\n\\n    function _requireSingularCollChange(uint _collWithdrawal) internal view {\\n        require(\\n            msg.value == 0 || _collWithdrawal == 0,\\n            \\\"BorrowerOperations: Cannot withdraw and add coll\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsBorrower(address _borrower) internal view {\\n        require(\\n            msg.sender == _borrower,\\n            \\\"Operation: Caller must be the borrower for a withdrawal\\\"\\n        );\\n    }\\n\\n    function _requireNonZeroAdjustment(\\n        uint _collWithdrawal,\\n        uint _ZKUSDChange\\n    ) internal view {\\n        require(\\n            msg.value != 0 || _collWithdrawal != 0 || _ZKUSDChange != 0,\\n            \\\"Operation: There must be either a collateral change or a debt change\\\"\\n        );\\n    }\\n\\n    function _requireTroveisActive(\\n        ITroveManager _troveManager,\\n        address _borrower\\n    ) internal view {\\n        uint status = _troveManager.getTroveStatus(_borrower);\\n        require(status == 1, \\\"Operation: Trove does not exist or is closed\\\");\\n    }\\n\\n    function _requireTroveisNotActive(\\n        ITroveManager _troveManager,\\n        address _borrower\\n    ) internal view {\\n        uint status = _troveManager.getTroveStatus(_borrower);\\n        require(status != 1, \\\"Operation: Trove is active\\\");\\n    }\\n\\n    function _requireNonZeroDebtChange(uint _ZKUSDChange) internal pure {\\n        require(\\n            _ZKUSDChange > 0,\\n            \\\"Operation: Debt increase requires non-zero debtChange\\\"\\n        );\\n    }\\n\\n    function _requireNotInRecoveryMode(uint _price) internal view {\\n        require(\\n            !_checkRecoveryMode(_price),\\n            \\\"Operation: Operation not permitted during Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireNoCollWithdrawal(uint _collWithdrawal) internal pure {\\n        require(\\n            _collWithdrawal == 0,\\n            \\\"Operation: Collateral withdrawal not permitted Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireValidAdjustmentInCurrentMode(\\n        bool _isRecoveryMode,\\n        uint _collWithdrawal,\\n        bool _isDebtIncrease,\\n        LocalVariables_adjustTrove memory _vars\\n    ) internal view {\\n        /*\\n         *In Recovery Mode, only allow:\\n         *\\n         * - Pure collateral top-up\\n         * - Pure debt repayment\\n         * - Collateral top-up with debt repayment\\n         * - A debt increase combined with a collateral top-up which makes the ICR >= 150% and improves the ICR (and by extension improves the TCR).\\n         *\\n         * In Normal Mode, ensure:\\n         *\\n         * - The new ICR is above MCR\\n         * - The adjustment won't pull the TCR below CCR\\n         */\\n        if (_isRecoveryMode) {\\n            _requireNoCollWithdrawal(_collWithdrawal);\\n            if (_isDebtIncrease) {\\n                _requireICRisAboveCCR(_vars.newICR);\\n                _requireNewICRisAboveOldICR(_vars.newICR, _vars.oldICR);\\n            }\\n        } else {\\n            // if Normal Mode\\n            _requireICRisAboveMCR(_vars.newICR);\\n            _vars.newTCR = _getNewTCRFromTroveChange(\\n                _vars.collChange,\\n                _vars.isCollIncrease,\\n                _vars.netDebtChange,\\n                _isDebtIncrease,\\n                _vars.price\\n            );\\n            _requireNewTCRisAboveCCR(_vars.newTCR);\\n        }\\n    }\\n\\n    function _requireICRisAboveMCR(uint _newICR) internal pure {\\n        require(\\n            _newICR >= MCR,\\n            \\\"Operation: An operation that would result in ICR < MCR is not permitted\\\"\\n        );\\n    }\\n\\n    function _requireICRisAboveCCR(uint _newICR) internal pure {\\n        require(\\n            _newICR >= CCR,\\n            \\\"Operation: Operation must leave trove with ICR >= CCR\\\"\\n        );\\n    }\\n\\n    function _requireNewICRisAboveOldICR(\\n        uint _newICR,\\n        uint _oldICR\\n    ) internal pure {\\n        require(\\n            _newICR >= _oldICR,\\n            \\\"Operation: Cannot decrease your Trove's ICR in Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireNewTCRisAboveCCR(uint _newTCR) internal pure {\\n        require(\\n            _newTCR >= CCR,\\n            \\\"Operation: An operation that would result in TCR < CCR is not permitted\\\"\\n        );\\n    }\\n\\n    function _requireAtLeastMinNetDebt(uint _netDebt) internal pure {\\n        require(\\n            _netDebt >= MIN_NET_DEBT,\\n            \\\"Operation: Trove's net debt must be greater than minimum\\\"\\n        );\\n    }\\n\\n    function _requireValidZKUSDRepayment(\\n        uint _currentDebt,\\n        uint _debtRepayment\\n    ) internal pure {\\n        require(\\n            _debtRepayment <= _currentDebt.sub(ZKUSD_GAS_COMPENSATION),\\n            \\\"Operation: Amount repaid must not be larger than the Trove's debt\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsStabilityPool() internal view {\\n        require(\\n            msg.sender == stabilityPoolAddress,\\n            \\\"Operation: Caller is not Stability Pool\\\"\\n        );\\n    }\\n\\n    function _requireSufficientZKUSDBalance(\\n        IZKUSDToken _zkusdToken,\\n        address _borrower,\\n        uint _debtRepayment\\n    ) internal view {\\n        require(\\n            _zkusdToken.balanceOf(_borrower) >= _debtRepayment,\\n            \\\"Operation: Caller doesnt have enough ZKUSD to make repayment\\\"\\n        );\\n    }\\n\\n    function _requireValidMaxFeePercentage(\\n        uint _maxFeePercentage,\\n        bool _isRecoveryMode\\n    ) internal pure {\\n        if (_isRecoveryMode) {\\n            require(\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\n                \\\"Max fee percentage must less than or equal to 100%\\\"\\n            );\\n        } else {\\n            require(\\n                _maxFeePercentage >= BORROWING_FEE_FLOOR &&\\n                    _maxFeePercentage <= DECIMAL_PRECISION,\\n                \\\"Max fee percentage must be between 0.5% and 100%\\\"\\n            );\\n        }\\n    }\\n\\n    // --- ICR and TCR getters ---\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n    function _getNewNominalICRFromTroveChange(\\n        uint _coll,\\n        uint _debt,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease\\n    ) internal pure returns (uint) {\\n        (uint newColl, uint newDebt) = _getNewTroveAmounts(\\n            _coll,\\n            _debt,\\n            _collChange,\\n            _isCollIncrease,\\n            _debtChange,\\n            _isDebtIncrease\\n        );\\n\\n        uint newNICR = FullMath._computeNominalCR(newColl, newDebt);\\n        return newNICR;\\n    }\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n    function _getNewICRFromTroveChange(\\n        uint _coll,\\n        uint _debt,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease,\\n        uint _price\\n    ) internal pure returns (uint) {\\n        (uint newColl, uint newDebt) = _getNewTroveAmounts(\\n            _coll,\\n            _debt,\\n            _collChange,\\n            _isCollIncrease,\\n            _debtChange,\\n            _isDebtIncrease\\n        );\\n\\n        uint newICR = FullMath._computeCR(newColl, newDebt, _price);\\n        return newICR;\\n    }\\n\\n    function _getNewTroveAmounts(\\n        uint _coll,\\n        uint _debt,\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease\\n    ) internal pure returns (uint, uint) {\\n        uint newColl = _coll;\\n        uint newDebt = _debt;\\n\\n        newColl = _isCollIncrease\\n            ? _coll.add(_collChange)\\n            : _coll.sub(_collChange);\\n        newDebt = _isDebtIncrease\\n            ? _debt.add(_debtChange)\\n            : _debt.sub(_debtChange);\\n\\n        return (newColl, newDebt);\\n    }\\n\\n    function _getNewTCRFromTroveChange(\\n        uint _collChange,\\n        bool _isCollIncrease,\\n        uint _debtChange,\\n        bool _isDebtIncrease,\\n        uint _price\\n    ) internal view returns (uint) {\\n        uint totalColl = getEntireSystemColl();\\n        uint totalDebt = getEntireSystemDebt();\\n\\n        totalColl = _isCollIncrease\\n            ? totalColl.add(_collChange)\\n            : totalColl.sub(_collChange);\\n        totalDebt = _isDebtIncrease\\n            ? totalDebt.add(_debtChange)\\n            : totalDebt.sub(_debtChange);\\n\\n        uint newTCR = FullMath._computeCR(totalColl, totalDebt, _price);\\n        return newTCR;\\n    }\\n\\n    function getCompositeDebt(\\n        uint _debt\\n    ) external pure override returns (uint) {\\n        return _getCompositeDebt(_debt);\\n    }\\n}\\n\",\"keccak256\":\"0x57a1ee644b256bf0517ca390168fda50d9c1dda12b8061d5e90ed461cf62407b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000023565b62000075565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61344a80620000856000396000f3fe6080604052600436106101ee5760003560e01c806372fe25aa1161010d578063a20baee6116100a0578063c192645b1161006f578063c192645b1461053c578063c6a6cf2014610559578063e34341ab1461056c578063f2fde38b1461058c578063f92d3433146105ac57600080fd5b8063a20baee6146103d3578063a3f4df7e146104a6578063ae918754146104fc578063b4bb222d1461051c57600080fd5b80637f7dde4a116100dc5780637f7dde4a14610440578063860665b314610460578063887105d3146104735780638da5cb5b1461048857600080fd5b806372fe25aa146103d3578063741bef1a146103ef578063794e57241461040f578063795d26c31461042b57600080fd5b80634ff814431161018557806368647db11161015457806368647db1146103765780636c37a4af146103895780636f0b0c1c146103a9578063715018a6146103be57600080fd5b80634ff81443146102fa5780635530273c1461031a5780635733d58f1461033a57806364248d081461035657600080fd5b806335a3f707116101c157806335a3f7071461026d5780633cc74225146102a55780633d83908a146102c55780634870dd9a146102e557600080fd5b80630e704d50146101f357806310e7dd391461020a5780631ac9b21c1461022a5780631bf435551461023d575b600080fd5b3480156101ff57600080fd5b506102086105c1565b005b34801561021657600080fd5b506102086102253660046130d2565b610972565b610208610238366004613118565b610989565b34801561024957600080fd5b5061025a6818650127cc3dc8000081565b6040519081526020015b60405180910390f35b34801561027957600080fd5b50600a5461028d906001600160a01b031681565b6040516001600160a01b039091168152602001610264565b3480156102b157600080fd5b5060015461028d906001600160a01b031681565b3480156102d157600080fd5b5060045461028d906001600160a01b031681565b3480156102f157600080fd5b5061025a60c881565b34801561030657600080fd5b5061025a61031536600461315b565b6109a8565b34801561032657600080fd5b50610208610335366004613174565b6109b9565b34801561034657600080fd5b5061025a6714d1120d7b16000081565b34801561036257600080fd5b50610208610371366004613174565b6109ca565b610208610384366004613199565b6109dc565b34801561039557600080fd5b506102086103a43660046131cc565b6109f2565b3480156103b557600080fd5b50610208610d57565b3480156103ca57600080fd5b50610208610db0565b3480156103df57600080fd5b5061025a670de0b6b3a764000081565b3480156103fb57600080fd5b5060025461028d906001600160a01b031681565b34801561041b57600080fd5b5061025a670f43fc2c04ee000081565b34801561043757600080fd5b5061025a610dc4565b34801561044c57600080fd5b5060005461028d906001600160a01b031681565b61020861046e3660046130d2565b610ec0565b34801561047f57600080fd5b5061025a6114b9565b34801561049457600080fd5b506003546001600160a01b031661028d565b3480156104b257600080fd5b506104ef6040518060400160405280601281526020017f426f72726f7765724f7065726174696f6e73000000000000000000000000000081525081565b6040516102649190613286565b34801561050857600080fd5b50600b5461028d906001600160a01b031681565b34801561052857600080fd5b5060095461028d906001600160a01b031681565b34801561054857600080fd5b5061025a6802b5e3af16b188000081565b6102086105673660046132d4565b61157e565b34801561057857600080fd5b5060085461028d906001600160a01b031681565b34801561059857600080fd5b506102086105a736600461333a565b611595565b3480156105b857600080fd5b5061025a611613565b600454600054600a546001600160a01b039283169291821691166105e58333611635565b60025460408051630fdb11cf60e01b815290516000926001600160a01b031691630fdb11cf916004808301926020929190829003018187875af1158015610630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106549190613355565b905061065f8161170a565b604051630b07655760e01b81523360048201526001600160a01b03851690630b07655790602401600060405180830381600087803b1580156106a057600080fd5b505af11580156106b4573d6000803e3d6000fd5b50506040516309019aaf60e31b8152336004820152600092506001600160a01b038716915063480cd57890602401602060405180830381865afa1580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107239190613355565b60405163d66a255360e01b81523360048201529091506000906001600160a01b0387169063d66a255390602401602060405180830381865afa15801561076d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107919190613355565b90506107b084336107ab846802b5e3af16b1880000611786565b611799565b60006107c18360008460008861187a565b90506107cc816118ef565b604051631fc5750960e31b81523360048201526001600160a01b0388169063fe2ba84890602401600060405180830381600087803b15801561080d57600080fd5b505af1158015610821573d6000803e3d6000fd5b50506040516365e89c5760e11b81523360048201526001600160a01b038a16925063cbd138ae9150602401600060405180830381600087803b15801561086657600080fd5b505af115801561087a573d6000803e3d6000fd5b50505050336001600160a01b03167fc3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8b600080600060016040516108c09493929190613390565b60405180910390a26108e68686336108e1866802b5e3af16b1880000611786565b61197d565b60065461090990879087906001600160a01b03166802b5e3af16b188000061197d565b6040516373333ae560e11b8152336004820152602481018490526001600160a01b0387169063e66675ca90604401600060405180830381600087803b15801561095157600080fd5b505af1158015610965573d6000803e3d6000fd5b5050505050505050505050565b61098333600085600186868a611a3f565b50505050565b61099161201c565b6109a383600080600086866000611a3f565b505050565b60006109b382612086565b92915050565b6109a3338460008086866000611a3f565b6109a333600085600086866000611a3f565b6109ee33600080600086866000611a3f565b5050565b6109fa61209b565b610a038a6120f5565b610a0c896120f5565b610a15886120f5565b610a1e876120f5565b610a27866120f5565b610a30856120f5565b610a39846120f5565b610a42836120f5565b610a4b826120f5565b610a54816120f5565b6004805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038d81169182179093556000805483168d85161790556001805483168c85161790556005805483168b85161790556006805483168a8516179055600780548316898516179055600280548316888516179055600b80548316878516179055600a8054831686851617905560098054831693851693841790556008805490921690921790556040519081527f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a56789060200160405180910390a16040516001600160a01b038a1681527f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8829060200160405180910390a16040516001600160a01b03891681527f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b9060200160405180910390a16040516001600160a01b03881681527f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f9060200160405180910390a16040516001600160a01b03871681527fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa09060200160405180910390a16040516001600160a01b03861681527fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d9060200160405180910390a16040516001600160a01b03851681527f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db2649060200160405180910390a16040516001600160a01b03841681527f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe788009060200160405180910390a16040516001600160a01b03831681527fbce04ccd812fbb02ec2145498f813470d7b7587b19477428388fe8201a1521319060200160405180910390a16040516001600160a01b03821681527f468634f5d5d4ec87457506a98d964db31fea0d63fc80a14ba75267970253ac149060200160405180910390a150505050505050505050565b60075460405163b32beb5b60e01b81523360048201526001600160a01b039091169063b32beb5b90602401600060405180830381600087803b158015610d9c57600080fd5b505af1158015610983573d6000803e3d6000fd5b610db861209b565b610dc260006121a2565b565b600080546040805163512a9ebb60e01b8152905183926001600160a01b03169163512a9ebb9160048083019260209291908290030181865afa158015610e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e329190613355565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663512a9ebb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ead9190613355565b9050610eb98282612201565b9250505090565b6040805160608082018352600480546001600160a01b039081168452600080548216602080870191909152600a548316868801528651610100810188528281528082018390528088018390529485018290526080850182905260a0850182905260c0850182905260e085018290526002548751630fdb11cf60e01b8152975196979596931694630fdb11cf948181019492939183900301908290875af1158015610f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f929190613355565b808252600090610fa19061220d565b9050610fad878261222a565b8251610fb99033612356565b6040820186905280610ff457610fd983600001518460400151888a612416565b602083018190526040830151610fee91612201565b60408301525b61100182604001516125b2565b61100e8260400151612086565b60608301819052611021576110216133b2565b6110343483606001518460000151612631565b60808301526060820151611049903490612663565b60a08301528015611066576110618260800151612692565b611099565b6110738260800151612710565b600061108c34600185606001516001876000015161187a565b9050611097816118ef565b505b8251604051635d6b480f60e01b8152336004820152600160248201526001600160a01b0390911690635d6b480f90604401600060405180830381600087803b1580156110e457600080fd5b505af11580156110f8573d6000803e3d6000fd5b505084516040516372423c1760e01b81523360048201523460248201526001600160a01b0390911692506372423c1791506044016020604051808303816000875af115801561114b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116f9190613355565b5082516060830151604051639976cf4560e01b815233600482015260248101919091526001600160a01b0390911690639976cf45906044016020604051808303816000875af11580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea9190613355565b5082516040516382fe3eb960e01b81523360048201526001600160a01b03909116906382fe3eb990602401600060405180830381600087803b15801561122f57600080fd5b505af1158015611243573d6000803e3d6000fd5b50508451604051630c7940bd60e11b81523360048201526001600160a01b0390911692506318f2817a91506024016020604051808303816000875af1158015611290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b49190613355565b60c0830152600b5460a08301516040516346f7cf8760e01b815233600482015260248101919091526001600160a01b0387811660448301528681166064830152909116906346f7cf8790608401600060405180830381600087803b15801561131b57600080fd5b505af115801561132f573d6000803e3d6000fd5b505084516040516315d549f160e01b81523360048201526001600160a01b0390911692506315d549f191506024016020604051808303816000875af115801561137c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a09190613355565b60e0830181905260405190815233907f59cfd0cd754bc5748b6770e94a4ffa5f678d885cb899dcfadc5734edb97c67ab9060200160405180910390a26113ea83602001513461279e565b6114038360200151846040015133898660400151612856565b6020830151604084015160065461142f9291906001600160a01b03166802b5e3af16b188000080612856565b606082015160c083015160405133927fc3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8b9261146f92349190600090613390565b60405180910390a260208083015160405190815233917f26990916a37e0f8569b3c9f7472730814e6e924fda9de44752b4fb9972ef333f910160405180910390a250505050505050565b6000805460408051639334631960e01b8152905183926001600160a01b03169163933463199160048083019260209291908290030181865afa158015611503573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115279190613355565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663933463196040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e89573d6000803e3d6000fd5b61158d3386868686868c611a3f565b505050505050565b61159d61209b565b6001600160a01b0381166116075760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b611610816121a2565b50565b6116276103e8670de0b6b3a76400006133de565b611632906005613400565b81565b6040516321e3780160e01b81526001600160a01b038281166004830152600091908416906321e3780190602401602060405180830381865afa15801561167f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a39190613355565b9050806001146109a35760405162461bcd60e51b815260206004820152602c60248201527f4f7065726174696f6e3a2054726f766520646f6573206e6f742065786973742060448201526b1bdc881a5cc818db1bdcd95960a21b60648201526084016115fe565b6117138161220d565b156116105760405162461bcd60e51b815260206004820152603760248201527f4f7065726174696f6e3a204f7065726174696f6e206e6f74207065726d69747460448201527f656420647572696e67205265636f76657279204d6f646500000000000000000060648201526084016115fe565b60006117928284613417565b9392505050565b6040516370a0823160e01b81526001600160a01b0383811660048301528291908516906370a0823190602401602060405180830381865afa1580156117e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118069190613355565b10156109a35760405162461bcd60e51b815260206004820152603c60248201527f4f7065726174696f6e3a2043616c6c657220646f65736e74206861766520656e60448201527f6f756768205a4b55534420746f206d616b652072657061796d656e740000000060648201526084016115fe565b6000806118856114b9565b90506000611891610dc4565b9050866118a7576118a28289611786565b6118b1565b6118b18289612201565b9150846118c7576118c28187611786565b6118d1565b6118d18187612201565b905060006118e0838387612631565b93505050505b95945050505050565b6714d1120d7b1600008110156116105760405162461bcd60e51b815260206004820152604760248201527f4f7065726174696f6e3a20416e206f7065726174696f6e207468617420776f7560448201527f6c6420726573756c7420696e20544352203c20434352206973206e6f742070656064820152661c9b5a5d1d195960ca1b608482015260a4016115fe565b6040516305af902160e31b8152600481018290526001600160a01b03851690632d7c810890602401600060405180830381600087803b1580156119bf57600080fd5b505af11580156119d3573d6000803e3d6000fd5b5050604051632770a7eb60e21b81526001600160a01b0385811660048301526024820185905286169250639dc29fac9150604401600060405180830381600087803b158015611a2157600080fd5b505af1158015611a35573d6000803e3d6000fd5b5050505050505050565b6040805160608082018352600480546001600160a01b039081168452600080548216602080870191909152600a5483168688015286516101a0810188528281528082018390528088018390529485018290526080850182905260a0850182905260c0850182905260e08501829052610100850182905261012085018290526101408501829052610160850182905261018085018290526002548751630fdb11cf60e01b8152975196979596931694630fdb11cf948181019492939183900301908290875af1158015611b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b399190613355565b808252600090611b489061220d565b90508615611b6357611b5a848261222a565b611b6388612919565b611b6c8961298f565b611b768989612a0c565b8251611b82908b611635565b336001600160a01b038b161480611bb857506005546001600160a01b031633148015611bae5750600034115b8015611bb8575087155b611bc457611bc46133b2565b8251604051630b07655760e01b81526001600160a01b038c8116600483015290911690630b07655790602401600060405180830381600087803b158015611c0a57600080fd5b505af1158015611c1e573d6000803e3d6000fd5b50505050611c2c348a612aa3565b15156060840152602083015260408201889052868015611c4a575080155b15611c7f57611c63836000015184604001518a87612416565b61012083018190526040830151611c7991612201565b60408301525b825160405163d66a255360e01b81526001600160a01b038c811660048301529091169063d66a255390602401602060405180830381865afa158015611cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cec9190613355565b608083015282516040516309019aaf60e31b81526001600160a01b038c811660048301529091169063480cd57890602401602060405180830381865afa158015611d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5e9190613355565b60a0830181905260808301518351611d77929190612631565b8260c0018181525050611da78260a0015183608001518460200151856060015186604001518c8860000151612ac2565b60e083015260a0820151891115611dc057611dc06133b2565b611dcc818a8985612af5565b86158015611dda5750600088115b15611e2757611e02611dfd8360400151611df78560800151612b69565b90611786565b6125b2565b611e1482608001518360400151612b7e565b611e2783604001518b8460400151611799565b611e4583600001518b8460200151856060015186604001518c612c10565b6101408401526101608301528251604051630c7940bd60e11b81526001600160a01b038c81166004830152909116906318f2817a906024016020604051808303816000875af1158015611e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec09190613355565b826101800181815250506000611eee8360a0015184608001518560200151866060015187604001518d612e0a565b600b5460405163015f109360e51b81526001600160a01b038e81166004830152602482018490528a811660448301528981166064830152929350911690632be2126090608401600060405180830381600087803b158015611f4e57600080fd5b505af1158015611f62573d6000803e3d6000fd5b505050508a6001600160a01b03167fc3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8b8461014001518561016001518661018001516002604051611fb59493929190613390565b60405180910390a261012083015160405190815233907f26990916a37e0f8569b3c9f7472730814e6e924fda9de44752b4fb9972ef333f9060200160405180910390a26109658460200151856040015133866020015187606001518e8e8a60400151612e3b565b6005546001600160a01b03163314610dc25760405162461bcd60e51b815260206004820152602760248201527f4f7065726174696f6e3a2043616c6c6572206973206e6f742053746162696c696044820152661d1e48141bdbdb60ca1b60648201526084016115fe565b60006109b3826802b5e3af16b1880000612201565b6003546001600160a01b03163314610dc25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016115fe565b6001600160a01b03811661214b5760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064016115fe565b6001600160a01b0381163b6116105760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016115fe565b600380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611792828461342a565b60008061221983612ee0565b6714d1120d7b160000119392505050565b80156122ae57670de0b6b3a76400008211156109ee5760405162461bcd60e51b815260206004820152603260248201527f4d6178206665652070657263656e74616765206d757374206c6573732074686160448201527f6e206f7220657175616c20746f2031303025000000000000000000000000000060648201526084016115fe565b6122c26103e8670de0b6b3a76400006133de565b6122cd906005613400565b82101580156122e45750670de0b6b3a76400008211155b6109ee5760405162461bcd60e51b815260206004820152603060248201527f4d6178206665652070657263656e74616765206d75737420626520626574776560448201527f656e20302e352520616e6420313030250000000000000000000000000000000060648201526084016115fe565b6040516321e3780160e01b81526001600160a01b038281166004830152600091908416906321e3780190602401602060405180830381865afa1580156123a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c49190613355565b9050806001036109a35760405162461bcd60e51b815260206004820152601a60248201527f4f7065726174696f6e3a2054726f76652069732061637469766500000000000060448201526064016115fe565b6000846001600160a01b0316635dba4c4a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561245357600080fd5b505af1158015612467573d6000803e3d6000fd5b5050604051630631203b60e41b815260048101869052600092506001600160a01b038816915063631203b090602401602060405180830381865afa1580156124b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d79190613355565b90506124e4818585612f0c565b6008546040516318f40bcf60e11b8152600481018390526001600160a01b03909116906331e8179e90602401600060405180830381600087803b15801561252a57600080fd5b505af115801561253e573d6000803e3d6000fd5b50506009546040516340c10f1960e01b81526001600160a01b0391821660048201526024810185905290881692506340c10f199150604401600060405180830381600087803b15801561259057600080fd5b505af11580156125a4573d6000803e3d6000fd5b509298975050505050505050565b6818650127cc3dc800008110156116105760405162461bcd60e51b815260206004820152603860248201527f4f7065726174696f6e3a2054726f76652773206e65742064656274206d75737460448201527f2062652067726561746572207468616e206d696e696d756d000000000000000060648201526084016115fe565b6000821561265857600061264f846126498786612f76565b90612f82565b91506117929050565b506000199392505050565b6000811561268957612682826126498568056bc75e2d63100000612f76565b90506109b3565b506000196109b3565b6714d1120d7b1600008110156116105760405162461bcd60e51b815260206004820152603560248201527f4f7065726174696f6e3a204f7065726174696f6e206d757374206c656176652060448201527f74726f7665207769746820494352203e3d20434352000000000000000000000060648201526084016115fe565b670f43fc2c04ee00008110156116105760405162461bcd60e51b815260206004820152604760248201527f4f7065726174696f6e3a20416e206f7065726174696f6e207468617420776f7560448201527f6c6420726573756c7420696e20494352203c204d4352206973206e6f742070656064820152661c9b5a5d1d195960ca1b608482015260a4016115fe565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146127eb576040519150601f19603f3d011682016040523d82523d6000602084013e6127f0565b606091505b50509050806109a35760405162461bcd60e51b815260206004820152602c60248201527f4f7065726174696f6e3a2053656e64696e67204e454f4e20746f20416374697660448201526b19541bdbdb0819985a5b195960a21b60648201526084016115fe565b604051636b05e97760e01b8152600481018290526001600160a01b03861690636b05e97790602401600060405180830381600087803b15801561289857600080fd5b505af11580156128ac573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b03868116600483015260248201869052871692506340c10f199150604401600060405180830381600087803b1580156128fa57600080fd5b505af115801561290e573d6000803e3d6000fd5b505050505050505050565b600081116116105760405162461bcd60e51b815260206004820152603560248201527f4f7065726174696f6e3a204465627420696e637265617365207265717569726560448201527f73206e6f6e2d7a65726f20646562744368616e6765000000000000000000000060648201526084016115fe565b34158061299a575080155b6116105760405162461bcd60e51b815260206004820152603060248201527f426f72726f7765724f7065726174696f6e733a2043616e6e6f7420776974686460448201527f72617720616e642061646420636f6c6c0000000000000000000000000000000060648201526084016115fe565b34151580612a1957508115155b80612a2357508015155b6109ee5760405162461bcd60e51b8152602060048201526044602482018190527f4f7065726174696f6e3a205468657265206d7573742062652065697468657220908201527f6120636f6c6c61746572616c206368616e6765206f7220612064656274206368606482015263616e676560e01b608482015260a4016115fe565b6000808315612ab757508290506001612abb565b8291505b9250929050565b6000806000612ad58a8a8a8a8a8a612f8e565b915091506000612ae6838387612631565b9b9a5050505050505050505050565b8315612b2e57612b0483612fcc565b8115612b2957612b178160e00151612692565b612b298160e001518260c00151613040565b610983565b612b3b8160e00151612710565b612b5881602001518260600151836040015185856000015161187a565b6101008201819052610983906118ef565b60006109b3826802b5e3af16b1880000611786565b612b91826802b5e3af16b1880000611786565b8111156109ee5760405162461bcd60e51b815260206004820152604160248201527f4f7065726174696f6e3a20416d6f756e7420726570616964206d757374206e6f60448201527f74206265206c6172676572207468616e207468652054726f76652773206465626064820152601d60fa1b608482015260a4016115fe565b600080600085612c925760405163d3d6f84360e01b81526001600160a01b038981166004830152602482018990528a169063d3d6f843906044016020604051808303816000875af1158015612c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8d9190613355565b612d05565b6040516372423c1760e01b81526001600160a01b038981166004830152602482018990528a16906372423c17906044016020604051808303816000875af1158015612ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d059190613355565b9050600084612d8657604051630930874960e11b81526001600160a01b038a81166004830152602482018890528b16906312610e92906044016020604051808303816000875af1158015612d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d819190613355565b612df9565b604051639976cf4560e01b81526001600160a01b038a81166004830152602482018890528b1690639976cf45906044016020604051808303816000875af1158015612dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df99190613355565b919a91995090975050505050505050565b6000806000612e1d898989898989612f8e565b915091506000612e2d8383612663565b9a9950505050505050505050565b8115612e5357612e4e8888888685612856565b612e5f565b612e5f8888888661197d565b8315612e7457612e6f888661279e565b611a35565b6040516373333ae560e11b81526001600160a01b0387811660048301526024820187905289169063e66675ca90604401600060405180830381600087803b158015612ebe57600080fd5b505af1158015612ed2573d6000803e3d6000fd5b505050505050505050505050565b600080612eeb6114b9565b90506000612ef7610dc4565b9050612f04828286612631565b949350505050565b6000612f248361264986670de0b6b3a7640000612f76565b9050818111156109835760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d00000060448201526064016115fe565b60006117928284613400565b600061179282846133de565b600080878786612fa757612fa28a89611786565b612fb1565b612fb18a89612201565b915084612fc257612d818987611786565b612df98987612201565b80156116105760405162461bcd60e51b815260206004820152603c60248201527f4f7065726174696f6e3a20436f6c6c61746572616c207769746864726177616c60448201527f206e6f74207065726d6974746564205265636f76657279204d6f64650000000060648201526084016115fe565b808210156109ee5760405162461bcd60e51b815260206004820152603c60248201527f4f7065726174696f6e3a2043616e6e6f7420646563726561736520796f75722060448201527f54726f766527732049435220696e205265636f76657279204d6f64650000000060648201526084016115fe565b80356001600160a01b03811681146130cd57600080fd5b919050565b600080600080608085870312156130e857600080fd5b84359350602085013592506130ff604086016130b6565b915061310d606086016130b6565b905092959194509250565b60008060006060848603121561312d57600080fd5b613136846130b6565b9250613144602085016130b6565b9150613152604085016130b6565b90509250925092565b60006020828403121561316d57600080fd5b5035919050565b60008060006060848603121561318957600080fd5b83359250613144602085016130b6565b600080604083850312156131ac57600080fd5b6131b5836130b6565b91506131c3602084016130b6565b90509250929050565b6000806000806000806000806000806101408b8d0312156131ec57600080fd5b6131f58b6130b6565b995061320360208c016130b6565b985061321160408c016130b6565b975061321f60608c016130b6565b965061322d60808c016130b6565b955061323b60a08c016130b6565b945061324960c08c016130b6565b935061325760e08c016130b6565b92506132666101008c016130b6565b91506132756101208c016130b6565b90509295989b9194979a5092959850565b600060208083528351808285015260005b818110156132b357858101830151858201604001528201613297565b506000604082860101526040601f19601f8301168501019250505092915050565b60008060008060008060c087890312156132ed57600080fd5b8635955060208701359450604087013593506060870135801515811461331257600080fd5b9250613320608088016130b6565b915061332e60a088016130b6565b90509295509295509295565b60006020828403121561334c57600080fd5b611792826130b6565b60006020828403121561336757600080fd5b5051919050565b6003811061338c57634e487b7160e01b600052602160045260246000fd5b9052565b8481526020810184905260408101839052608081016118e6606083018461336e565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000826133fb57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176109b3576109b36133c8565b818103818111156109b3576109b36133c8565b808201808211156109b3576109b36133c856fea164736f6c6343000811000a",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c806372fe25aa1161010d578063a20baee6116100a0578063c192645b1161006f578063c192645b1461053c578063c6a6cf2014610559578063e34341ab1461056c578063f2fde38b1461058c578063f92d3433146105ac57600080fd5b8063a20baee6146103d3578063a3f4df7e146104a6578063ae918754146104fc578063b4bb222d1461051c57600080fd5b80637f7dde4a116100dc5780637f7dde4a14610440578063860665b314610460578063887105d3146104735780638da5cb5b1461048857600080fd5b806372fe25aa146103d3578063741bef1a146103ef578063794e57241461040f578063795d26c31461042b57600080fd5b80634ff814431161018557806368647db11161015457806368647db1146103765780636c37a4af146103895780636f0b0c1c146103a9578063715018a6146103be57600080fd5b80634ff81443146102fa5780635530273c1461031a5780635733d58f1461033a57806364248d081461035657600080fd5b806335a3f707116101c157806335a3f7071461026d5780633cc74225146102a55780633d83908a146102c55780634870dd9a146102e557600080fd5b80630e704d50146101f357806310e7dd391461020a5780631ac9b21c1461022a5780631bf435551461023d575b600080fd5b3480156101ff57600080fd5b506102086105c1565b005b34801561021657600080fd5b506102086102253660046130d2565b610972565b610208610238366004613118565b610989565b34801561024957600080fd5b5061025a6818650127cc3dc8000081565b6040519081526020015b60405180910390f35b34801561027957600080fd5b50600a5461028d906001600160a01b031681565b6040516001600160a01b039091168152602001610264565b3480156102b157600080fd5b5060015461028d906001600160a01b031681565b3480156102d157600080fd5b5060045461028d906001600160a01b031681565b3480156102f157600080fd5b5061025a60c881565b34801561030657600080fd5b5061025a61031536600461315b565b6109a8565b34801561032657600080fd5b50610208610335366004613174565b6109b9565b34801561034657600080fd5b5061025a6714d1120d7b16000081565b34801561036257600080fd5b50610208610371366004613174565b6109ca565b610208610384366004613199565b6109dc565b34801561039557600080fd5b506102086103a43660046131cc565b6109f2565b3480156103b557600080fd5b50610208610d57565b3480156103ca57600080fd5b50610208610db0565b3480156103df57600080fd5b5061025a670de0b6b3a764000081565b3480156103fb57600080fd5b5060025461028d906001600160a01b031681565b34801561041b57600080fd5b5061025a670f43fc2c04ee000081565b34801561043757600080fd5b5061025a610dc4565b34801561044c57600080fd5b5060005461028d906001600160a01b031681565b61020861046e3660046130d2565b610ec0565b34801561047f57600080fd5b5061025a6114b9565b34801561049457600080fd5b506003546001600160a01b031661028d565b3480156104b257600080fd5b506104ef6040518060400160405280601281526020017f426f72726f7765724f7065726174696f6e73000000000000000000000000000081525081565b6040516102649190613286565b34801561050857600080fd5b50600b5461028d906001600160a01b031681565b34801561052857600080fd5b5060095461028d906001600160a01b031681565b34801561054857600080fd5b5061025a6802b5e3af16b188000081565b6102086105673660046132d4565b61157e565b34801561057857600080fd5b5060085461028d906001600160a01b031681565b34801561059857600080fd5b506102086105a736600461333a565b611595565b3480156105b857600080fd5b5061025a611613565b600454600054600a546001600160a01b039283169291821691166105e58333611635565b60025460408051630fdb11cf60e01b815290516000926001600160a01b031691630fdb11cf916004808301926020929190829003018187875af1158015610630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106549190613355565b905061065f8161170a565b604051630b07655760e01b81523360048201526001600160a01b03851690630b07655790602401600060405180830381600087803b1580156106a057600080fd5b505af11580156106b4573d6000803e3d6000fd5b50506040516309019aaf60e31b8152336004820152600092506001600160a01b038716915063480cd57890602401602060405180830381865afa1580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107239190613355565b60405163d66a255360e01b81523360048201529091506000906001600160a01b0387169063d66a255390602401602060405180830381865afa15801561076d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107919190613355565b90506107b084336107ab846802b5e3af16b1880000611786565b611799565b60006107c18360008460008861187a565b90506107cc816118ef565b604051631fc5750960e31b81523360048201526001600160a01b0388169063fe2ba84890602401600060405180830381600087803b15801561080d57600080fd5b505af1158015610821573d6000803e3d6000fd5b50506040516365e89c5760e11b81523360048201526001600160a01b038a16925063cbd138ae9150602401600060405180830381600087803b15801561086657600080fd5b505af115801561087a573d6000803e3d6000fd5b50505050336001600160a01b03167fc3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8b600080600060016040516108c09493929190613390565b60405180910390a26108e68686336108e1866802b5e3af16b1880000611786565b61197d565b60065461090990879087906001600160a01b03166802b5e3af16b188000061197d565b6040516373333ae560e11b8152336004820152602481018490526001600160a01b0387169063e66675ca90604401600060405180830381600087803b15801561095157600080fd5b505af1158015610965573d6000803e3d6000fd5b5050505050505050505050565b61098333600085600186868a611a3f565b50505050565b61099161201c565b6109a383600080600086866000611a3f565b505050565b60006109b382612086565b92915050565b6109a3338460008086866000611a3f565b6109a333600085600086866000611a3f565b6109ee33600080600086866000611a3f565b5050565b6109fa61209b565b610a038a6120f5565b610a0c896120f5565b610a15886120f5565b610a1e876120f5565b610a27866120f5565b610a30856120f5565b610a39846120f5565b610a42836120f5565b610a4b826120f5565b610a54816120f5565b6004805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038d81169182179093556000805483168d85161790556001805483168c85161790556005805483168b85161790556006805483168a8516179055600780548316898516179055600280548316888516179055600b80548316878516179055600a8054831686851617905560098054831693851693841790556008805490921690921790556040519081527f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a56789060200160405180910390a16040516001600160a01b038a1681527f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8829060200160405180910390a16040516001600160a01b03891681527f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b9060200160405180910390a16040516001600160a01b03881681527f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f9060200160405180910390a16040516001600160a01b03871681527fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa09060200160405180910390a16040516001600160a01b03861681527fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d9060200160405180910390a16040516001600160a01b03851681527f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db2649060200160405180910390a16040516001600160a01b03841681527f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe788009060200160405180910390a16040516001600160a01b03831681527fbce04ccd812fbb02ec2145498f813470d7b7587b19477428388fe8201a1521319060200160405180910390a16040516001600160a01b03821681527f468634f5d5d4ec87457506a98d964db31fea0d63fc80a14ba75267970253ac149060200160405180910390a150505050505050505050565b60075460405163b32beb5b60e01b81523360048201526001600160a01b039091169063b32beb5b90602401600060405180830381600087803b158015610d9c57600080fd5b505af1158015610983573d6000803e3d6000fd5b610db861209b565b610dc260006121a2565b565b600080546040805163512a9ebb60e01b8152905183926001600160a01b03169163512a9ebb9160048083019260209291908290030181865afa158015610e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e329190613355565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663512a9ebb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ead9190613355565b9050610eb98282612201565b9250505090565b6040805160608082018352600480546001600160a01b039081168452600080548216602080870191909152600a548316868801528651610100810188528281528082018390528088018390529485018290526080850182905260a0850182905260c0850182905260e085018290526002548751630fdb11cf60e01b8152975196979596931694630fdb11cf948181019492939183900301908290875af1158015610f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f929190613355565b808252600090610fa19061220d565b9050610fad878261222a565b8251610fb99033612356565b6040820186905280610ff457610fd983600001518460400151888a612416565b602083018190526040830151610fee91612201565b60408301525b61100182604001516125b2565b61100e8260400151612086565b60608301819052611021576110216133b2565b6110343483606001518460000151612631565b60808301526060820151611049903490612663565b60a08301528015611066576110618260800151612692565b611099565b6110738260800151612710565b600061108c34600185606001516001876000015161187a565b9050611097816118ef565b505b8251604051635d6b480f60e01b8152336004820152600160248201526001600160a01b0390911690635d6b480f90604401600060405180830381600087803b1580156110e457600080fd5b505af11580156110f8573d6000803e3d6000fd5b505084516040516372423c1760e01b81523360048201523460248201526001600160a01b0390911692506372423c1791506044016020604051808303816000875af115801561114b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116f9190613355565b5082516060830151604051639976cf4560e01b815233600482015260248101919091526001600160a01b0390911690639976cf45906044016020604051808303816000875af11580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea9190613355565b5082516040516382fe3eb960e01b81523360048201526001600160a01b03909116906382fe3eb990602401600060405180830381600087803b15801561122f57600080fd5b505af1158015611243573d6000803e3d6000fd5b50508451604051630c7940bd60e11b81523360048201526001600160a01b0390911692506318f2817a91506024016020604051808303816000875af1158015611290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b49190613355565b60c0830152600b5460a08301516040516346f7cf8760e01b815233600482015260248101919091526001600160a01b0387811660448301528681166064830152909116906346f7cf8790608401600060405180830381600087803b15801561131b57600080fd5b505af115801561132f573d6000803e3d6000fd5b505084516040516315d549f160e01b81523360048201526001600160a01b0390911692506315d549f191506024016020604051808303816000875af115801561137c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a09190613355565b60e0830181905260405190815233907f59cfd0cd754bc5748b6770e94a4ffa5f678d885cb899dcfadc5734edb97c67ab9060200160405180910390a26113ea83602001513461279e565b6114038360200151846040015133898660400151612856565b6020830151604084015160065461142f9291906001600160a01b03166802b5e3af16b188000080612856565b606082015160c083015160405133927fc3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8b9261146f92349190600090613390565b60405180910390a260208083015160405190815233917f26990916a37e0f8569b3c9f7472730814e6e924fda9de44752b4fb9972ef333f910160405180910390a250505050505050565b6000805460408051639334631960e01b8152905183926001600160a01b03169163933463199160048083019260209291908290030181865afa158015611503573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115279190613355565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663933463196040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e89573d6000803e3d6000fd5b61158d3386868686868c611a3f565b505050505050565b61159d61209b565b6001600160a01b0381166116075760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b611610816121a2565b50565b6116276103e8670de0b6b3a76400006133de565b611632906005613400565b81565b6040516321e3780160e01b81526001600160a01b038281166004830152600091908416906321e3780190602401602060405180830381865afa15801561167f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a39190613355565b9050806001146109a35760405162461bcd60e51b815260206004820152602c60248201527f4f7065726174696f6e3a2054726f766520646f6573206e6f742065786973742060448201526b1bdc881a5cc818db1bdcd95960a21b60648201526084016115fe565b6117138161220d565b156116105760405162461bcd60e51b815260206004820152603760248201527f4f7065726174696f6e3a204f7065726174696f6e206e6f74207065726d69747460448201527f656420647572696e67205265636f76657279204d6f646500000000000000000060648201526084016115fe565b60006117928284613417565b9392505050565b6040516370a0823160e01b81526001600160a01b0383811660048301528291908516906370a0823190602401602060405180830381865afa1580156117e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118069190613355565b10156109a35760405162461bcd60e51b815260206004820152603c60248201527f4f7065726174696f6e3a2043616c6c657220646f65736e74206861766520656e60448201527f6f756768205a4b55534420746f206d616b652072657061796d656e740000000060648201526084016115fe565b6000806118856114b9565b90506000611891610dc4565b9050866118a7576118a28289611786565b6118b1565b6118b18289612201565b9150846118c7576118c28187611786565b6118d1565b6118d18187612201565b905060006118e0838387612631565b93505050505b95945050505050565b6714d1120d7b1600008110156116105760405162461bcd60e51b815260206004820152604760248201527f4f7065726174696f6e3a20416e206f7065726174696f6e207468617420776f7560448201527f6c6420726573756c7420696e20544352203c20434352206973206e6f742070656064820152661c9b5a5d1d195960ca1b608482015260a4016115fe565b6040516305af902160e31b8152600481018290526001600160a01b03851690632d7c810890602401600060405180830381600087803b1580156119bf57600080fd5b505af11580156119d3573d6000803e3d6000fd5b5050604051632770a7eb60e21b81526001600160a01b0385811660048301526024820185905286169250639dc29fac9150604401600060405180830381600087803b158015611a2157600080fd5b505af1158015611a35573d6000803e3d6000fd5b5050505050505050565b6040805160608082018352600480546001600160a01b039081168452600080548216602080870191909152600a5483168688015286516101a0810188528281528082018390528088018390529485018290526080850182905260a0850182905260c0850182905260e08501829052610100850182905261012085018290526101408501829052610160850182905261018085018290526002548751630fdb11cf60e01b8152975196979596931694630fdb11cf948181019492939183900301908290875af1158015611b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b399190613355565b808252600090611b489061220d565b90508615611b6357611b5a848261222a565b611b6388612919565b611b6c8961298f565b611b768989612a0c565b8251611b82908b611635565b336001600160a01b038b161480611bb857506005546001600160a01b031633148015611bae5750600034115b8015611bb8575087155b611bc457611bc46133b2565b8251604051630b07655760e01b81526001600160a01b038c8116600483015290911690630b07655790602401600060405180830381600087803b158015611c0a57600080fd5b505af1158015611c1e573d6000803e3d6000fd5b50505050611c2c348a612aa3565b15156060840152602083015260408201889052868015611c4a575080155b15611c7f57611c63836000015184604001518a87612416565b61012083018190526040830151611c7991612201565b60408301525b825160405163d66a255360e01b81526001600160a01b038c811660048301529091169063d66a255390602401602060405180830381865afa158015611cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cec9190613355565b608083015282516040516309019aaf60e31b81526001600160a01b038c811660048301529091169063480cd57890602401602060405180830381865afa158015611d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5e9190613355565b60a0830181905260808301518351611d77929190612631565b8260c0018181525050611da78260a0015183608001518460200151856060015186604001518c8860000151612ac2565b60e083015260a0820151891115611dc057611dc06133b2565b611dcc818a8985612af5565b86158015611dda5750600088115b15611e2757611e02611dfd8360400151611df78560800151612b69565b90611786565b6125b2565b611e1482608001518360400151612b7e565b611e2783604001518b8460400151611799565b611e4583600001518b8460200151856060015186604001518c612c10565b6101408401526101608301528251604051630c7940bd60e11b81526001600160a01b038c81166004830152909116906318f2817a906024016020604051808303816000875af1158015611e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec09190613355565b826101800181815250506000611eee8360a0015184608001518560200151866060015187604001518d612e0a565b600b5460405163015f109360e51b81526001600160a01b038e81166004830152602482018490528a811660448301528981166064830152929350911690632be2126090608401600060405180830381600087803b158015611f4e57600080fd5b505af1158015611f62573d6000803e3d6000fd5b505050508a6001600160a01b03167fc3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8b8461014001518561016001518661018001516002604051611fb59493929190613390565b60405180910390a261012083015160405190815233907f26990916a37e0f8569b3c9f7472730814e6e924fda9de44752b4fb9972ef333f9060200160405180910390a26109658460200151856040015133866020015187606001518e8e8a60400151612e3b565b6005546001600160a01b03163314610dc25760405162461bcd60e51b815260206004820152602760248201527f4f7065726174696f6e3a2043616c6c6572206973206e6f742053746162696c696044820152661d1e48141bdbdb60ca1b60648201526084016115fe565b60006109b3826802b5e3af16b1880000612201565b6003546001600160a01b03163314610dc25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016115fe565b6001600160a01b03811661214b5760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064016115fe565b6001600160a01b0381163b6116105760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016115fe565b600380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611792828461342a565b60008061221983612ee0565b6714d1120d7b160000119392505050565b80156122ae57670de0b6b3a76400008211156109ee5760405162461bcd60e51b815260206004820152603260248201527f4d6178206665652070657263656e74616765206d757374206c6573732074686160448201527f6e206f7220657175616c20746f2031303025000000000000000000000000000060648201526084016115fe565b6122c26103e8670de0b6b3a76400006133de565b6122cd906005613400565b82101580156122e45750670de0b6b3a76400008211155b6109ee5760405162461bcd60e51b815260206004820152603060248201527f4d6178206665652070657263656e74616765206d75737420626520626574776560448201527f656e20302e352520616e6420313030250000000000000000000000000000000060648201526084016115fe565b6040516321e3780160e01b81526001600160a01b038281166004830152600091908416906321e3780190602401602060405180830381865afa1580156123a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c49190613355565b9050806001036109a35760405162461bcd60e51b815260206004820152601a60248201527f4f7065726174696f6e3a2054726f76652069732061637469766500000000000060448201526064016115fe565b6000846001600160a01b0316635dba4c4a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561245357600080fd5b505af1158015612467573d6000803e3d6000fd5b5050604051630631203b60e41b815260048101869052600092506001600160a01b038816915063631203b090602401602060405180830381865afa1580156124b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d79190613355565b90506124e4818585612f0c565b6008546040516318f40bcf60e11b8152600481018390526001600160a01b03909116906331e8179e90602401600060405180830381600087803b15801561252a57600080fd5b505af115801561253e573d6000803e3d6000fd5b50506009546040516340c10f1960e01b81526001600160a01b0391821660048201526024810185905290881692506340c10f199150604401600060405180830381600087803b15801561259057600080fd5b505af11580156125a4573d6000803e3d6000fd5b509298975050505050505050565b6818650127cc3dc800008110156116105760405162461bcd60e51b815260206004820152603860248201527f4f7065726174696f6e3a2054726f76652773206e65742064656274206d75737460448201527f2062652067726561746572207468616e206d696e696d756d000000000000000060648201526084016115fe565b6000821561265857600061264f846126498786612f76565b90612f82565b91506117929050565b506000199392505050565b6000811561268957612682826126498568056bc75e2d63100000612f76565b90506109b3565b506000196109b3565b6714d1120d7b1600008110156116105760405162461bcd60e51b815260206004820152603560248201527f4f7065726174696f6e3a204f7065726174696f6e206d757374206c656176652060448201527f74726f7665207769746820494352203e3d20434352000000000000000000000060648201526084016115fe565b670f43fc2c04ee00008110156116105760405162461bcd60e51b815260206004820152604760248201527f4f7065726174696f6e3a20416e206f7065726174696f6e207468617420776f7560448201527f6c6420726573756c7420696e20494352203c204d4352206973206e6f742070656064820152661c9b5a5d1d195960ca1b608482015260a4016115fe565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146127eb576040519150601f19603f3d011682016040523d82523d6000602084013e6127f0565b606091505b50509050806109a35760405162461bcd60e51b815260206004820152602c60248201527f4f7065726174696f6e3a2053656e64696e67204e454f4e20746f20416374697660448201526b19541bdbdb0819985a5b195960a21b60648201526084016115fe565b604051636b05e97760e01b8152600481018290526001600160a01b03861690636b05e97790602401600060405180830381600087803b15801561289857600080fd5b505af11580156128ac573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b03868116600483015260248201869052871692506340c10f199150604401600060405180830381600087803b1580156128fa57600080fd5b505af115801561290e573d6000803e3d6000fd5b505050505050505050565b600081116116105760405162461bcd60e51b815260206004820152603560248201527f4f7065726174696f6e3a204465627420696e637265617365207265717569726560448201527f73206e6f6e2d7a65726f20646562744368616e6765000000000000000000000060648201526084016115fe565b34158061299a575080155b6116105760405162461bcd60e51b815260206004820152603060248201527f426f72726f7765724f7065726174696f6e733a2043616e6e6f7420776974686460448201527f72617720616e642061646420636f6c6c0000000000000000000000000000000060648201526084016115fe565b34151580612a1957508115155b80612a2357508015155b6109ee5760405162461bcd60e51b8152602060048201526044602482018190527f4f7065726174696f6e3a205468657265206d7573742062652065697468657220908201527f6120636f6c6c61746572616c206368616e6765206f7220612064656274206368606482015263616e676560e01b608482015260a4016115fe565b6000808315612ab757508290506001612abb565b8291505b9250929050565b6000806000612ad58a8a8a8a8a8a612f8e565b915091506000612ae6838387612631565b9b9a5050505050505050505050565b8315612b2e57612b0483612fcc565b8115612b2957612b178160e00151612692565b612b298160e001518260c00151613040565b610983565b612b3b8160e00151612710565b612b5881602001518260600151836040015185856000015161187a565b6101008201819052610983906118ef565b60006109b3826802b5e3af16b1880000611786565b612b91826802b5e3af16b1880000611786565b8111156109ee5760405162461bcd60e51b815260206004820152604160248201527f4f7065726174696f6e3a20416d6f756e7420726570616964206d757374206e6f60448201527f74206265206c6172676572207468616e207468652054726f76652773206465626064820152601d60fa1b608482015260a4016115fe565b600080600085612c925760405163d3d6f84360e01b81526001600160a01b038981166004830152602482018990528a169063d3d6f843906044016020604051808303816000875af1158015612c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8d9190613355565b612d05565b6040516372423c1760e01b81526001600160a01b038981166004830152602482018990528a16906372423c17906044016020604051808303816000875af1158015612ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d059190613355565b9050600084612d8657604051630930874960e11b81526001600160a01b038a81166004830152602482018890528b16906312610e92906044016020604051808303816000875af1158015612d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d819190613355565b612df9565b604051639976cf4560e01b81526001600160a01b038a81166004830152602482018890528b1690639976cf45906044016020604051808303816000875af1158015612dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df99190613355565b919a91995090975050505050505050565b6000806000612e1d898989898989612f8e565b915091506000612e2d8383612663565b9a9950505050505050505050565b8115612e5357612e4e8888888685612856565b612e5f565b612e5f8888888661197d565b8315612e7457612e6f888661279e565b611a35565b6040516373333ae560e11b81526001600160a01b0387811660048301526024820187905289169063e66675ca90604401600060405180830381600087803b158015612ebe57600080fd5b505af1158015612ed2573d6000803e3d6000fd5b505050505050505050505050565b600080612eeb6114b9565b90506000612ef7610dc4565b9050612f04828286612631565b949350505050565b6000612f248361264986670de0b6b3a7640000612f76565b9050818111156109835760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d00000060448201526064016115fe565b60006117928284613400565b600061179282846133de565b600080878786612fa757612fa28a89611786565b612fb1565b612fb18a89612201565b915084612fc257612d818987611786565b612df98987612201565b80156116105760405162461bcd60e51b815260206004820152603c60248201527f4f7065726174696f6e3a20436f6c6c61746572616c207769746864726177616c60448201527f206e6f74207065726d6974746564205265636f76657279204d6f64650000000060648201526084016115fe565b808210156109ee5760405162461bcd60e51b815260206004820152603c60248201527f4f7065726174696f6e3a2043616e6e6f7420646563726561736520796f75722060448201527f54726f766527732049435220696e205265636f76657279204d6f64650000000060648201526084016115fe565b80356001600160a01b03811681146130cd57600080fd5b919050565b600080600080608085870312156130e857600080fd5b84359350602085013592506130ff604086016130b6565b915061310d606086016130b6565b905092959194509250565b60008060006060848603121561312d57600080fd5b613136846130b6565b9250613144602085016130b6565b9150613152604085016130b6565b90509250925092565b60006020828403121561316d57600080fd5b5035919050565b60008060006060848603121561318957600080fd5b83359250613144602085016130b6565b600080604083850312156131ac57600080fd5b6131b5836130b6565b91506131c3602084016130b6565b90509250929050565b6000806000806000806000806000806101408b8d0312156131ec57600080fd5b6131f58b6130b6565b995061320360208c016130b6565b985061321160408c016130b6565b975061321f60608c016130b6565b965061322d60808c016130b6565b955061323b60a08c016130b6565b945061324960c08c016130b6565b935061325760e08c016130b6565b92506132666101008c016130b6565b91506132756101208c016130b6565b90509295989b9194979a5092959850565b600060208083528351808285015260005b818110156132b357858101830151858201604001528201613297565b506000604082860101526040601f19601f8301168501019250505092915050565b60008060008060008060c087890312156132ed57600080fd5b8635955060208701359450604087013593506060870135801515811461331257600080fd5b9250613320608088016130b6565b915061332e60a088016130b6565b90509295509295509295565b60006020828403121561334c57600080fd5b611792826130b6565b60006020828403121561336757600080fd5b5051919050565b6003811061338c57634e487b7160e01b600052602160045260246000fd5b9052565b8481526020810184905260408101839052608081016118e6606083018461336e565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000826133fb57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176109b3576109b36133c8565b818103818111156109b3576109b36133c8565b808201808211156109b3576109b36133c856fea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimCollateral()": {
        "notice": "Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4126,
        "contract": "contracts/protocol/BorrowerOperations.sol:BorrowerOperations",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IActivePool)4320"
      },
      {
        "astId": 4129,
        "contract": "contracts/protocol/BorrowerOperations.sol:BorrowerOperations",
        "label": "defaultPool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDefaultPool)4673"
      },
      {
        "astId": 4132,
        "contract": "contracts/protocol/BorrowerOperations.sol:BorrowerOperations",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceFeed)4759"
      },
      {
        "astId": 53,
        "contract": "contracts/protocol/BorrowerOperations.sol:BorrowerOperations",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8573,
        "contract": "contracts/protocol/BorrowerOperations.sol:BorrowerOperations",
        "label": "troveManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITroveManager)5581"
      },
      {
        "astId": 8575,
        "contract": "contracts/protocol/BorrowerOperations.sol:BorrowerOperations",
        "label": "stabilityPoolAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 8577,
        "contract": "contracts/protocol/BorrowerOperations.sol:BorrowerOperations",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8580,
        "contract": "contracts/protocol/BorrowerOperations.sol:BorrowerOperations",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ICollSurplusPool)4616"
      },
      {
        "astId": 8583,
        "contract": "contracts/protocol/BorrowerOperations.sol:BorrowerOperations",
        "label": "zktStaking",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IZKTStaking)5726"
      },
      {
        "astId": 8585,
        "contract": "contracts/protocol/BorrowerOperations.sol:BorrowerOperations",
        "label": "zktStakingAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 8588,
        "contract": "contracts/protocol/BorrowerOperations.sol:BorrowerOperations",
        "label": "zkusdToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IZKUSDToken)5817"
      },
      {
        "astId": 8591,
        "contract": "contracts/protocol/BorrowerOperations.sol:BorrowerOperations",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ISortedTroves)4907"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IActivePool)4320": {
        "encoding": "inplace",
        "label": "contract IActivePool",
        "numberOfBytes": "20"
      },
      "t_contract(ICollSurplusPool)4616": {
        "encoding": "inplace",
        "label": "contract ICollSurplusPool",
        "numberOfBytes": "20"
      },
      "t_contract(IDefaultPool)4673": {
        "encoding": "inplace",
        "label": "contract IDefaultPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)4759": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISortedTroves)4907": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveManager)5581": {
        "encoding": "inplace",
        "label": "contract ITroveManager",
        "numberOfBytes": "20"
      },
      "t_contract(IZKTStaking)5726": {
        "encoding": "inplace",
        "label": "contract IZKTStaking",
        "numberOfBytes": "20"
      },
      "t_contract(IZKUSDToken)5817": {
        "encoding": "inplace",
        "label": "contract IZKUSDToken",
        "numberOfBytes": "20"
      }
    }
  }
}